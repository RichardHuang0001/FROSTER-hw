nohup: ignoring input
config files: ['configs/Kinetics/TemporalCLIP_vitb16_8x16_STAdapter_SSV2.yaml']
[12/17 11:00:38][INFO] test_net.py:  319: Test with config:
[12/17 11:00:38][INFO] test_net.py:  320: AUG:
  AA_TYPE: rand-m7-n4-mstd0.5-inc1
  COLOR_JITTER: 0.4
  ENABLE: False
  GEN_MASK_LOADER: False
  INTERPOLATION: bicubic
  MASK_FRAMES: False
  MASK_RATIO: 0.0
  MASK_TUBE: False
  MASK_WINDOW_SIZE: [8, 7, 7]
  MAX_MASK_PATCHES_PER_BLOCK: None
  NUM_SAMPLE: 2
  RE_COUNT: 1
  RE_MODE: pixel
  RE_PROB: 0.25
  RE_SPLIT: False
AVA:
  ANNOTATION_DIR: /mnt/vol/gfsai-flash3-east/ai-group/users/haoqifan/ava/frame_list/
  BGR: False
  DETECTION_SCORE_THRESH: 0.9
  EXCLUSION_FILE: ava_val_excluded_timestamps_v2.2.csv
  FRAME_DIR: /mnt/fair-flash3-east/ava_trainval_frames.img/
  FRAME_LIST_DIR: /mnt/vol/gfsai-flash3-east/ai-group/users/haoqifan/ava/frame_list/
  FULL_TEST_ON_VAL: False
  GROUNDTRUTH_FILE: ava_val_v2.2.csv
  IMG_PROC_BACKEND: cv2
  LABEL_MAP_FILE: ava_action_list_v2.2_for_activitynet_2019.pbtxt
  TEST_FORCE_FLIP: False
  TEST_LISTS: ['val.csv']
  TEST_PREDICT_BOX_LISTS: ['ava_val_predicted_boxes.csv']
  TRAIN_GT_BOX_LISTS: ['ava_train_v2.2.csv']
  TRAIN_LISTS: ['train_all.csv']
  TRAIN_PCA_JITTER_ONLY: True
  TRAIN_PREDICT_BOX_LISTS: []
  TRAIN_USE_COLOR_AUGMENTATION: False
BENCHMARK:
  LOG_PERIOD: 100
  NUM_EPOCHS: 5
  SHUFFLE: True
BN:
  GLOBAL_SYNC: False
  NORM_TYPE: batchnorm
  NUM_BATCHES_PRECISE: 200
  NUM_SPLITS: 1
  NUM_SYNC_DEVICES: 1
  USE_PRECISE_STATS: False
  WEIGHT_DECAY: 0.0
CONTRASTIVE:
  BN_MLP: False
  BN_SYNC_MLP: False
  DELTA_CLIPS_MAX: inf
  DELTA_CLIPS_MIN: -inf
  DIM: 128
  INTERP_MEMORY: False
  KNN_ON: True
  LENGTH: 239975
  LOCAL_SHUFFLE_BN: True
  MEM_TYPE: 1d
  MLP_DIM: 2048
  MOCO_MULTI_VIEW_QUEUE: False
  MOMENTUM: 0.5
  MOMENTUM_ANNEALING: False
  NUM_CLASSES_DOWNSTREAM: 400
  NUM_MLP_LAYERS: 1
  PREDICTOR_DEPTHS: []
  QUEUE_LEN: 65536
  SEQUENTIAL: False
  SIMCLR_DIST_ON: True
  SWAV_QEUE_LEN: 0
  T: 0.07
  TYPE: mem
DATA:
  COLOR_RND_GRAYSCALE: 0.0
  DECODING_BACKEND: pyav
  DECODING_SHORT_SIZE: 256
  DUMMY_LOAD: False
  ENSEMBLE_METHOD: sum
  IN22K_TRAINVAL: False
  IN22k_VAL_IN1K: 
  INDEX_LABEL_MAPPING_FILE: /mnt/SSD8T/home/huangwei/projects/FROSTER/zs_label_db/B2N_ssv2/train_rephrased.json
  INPUT_CHANNEL_NUM: [3]
  INV_UNIFORM_SAMPLE: False
  IN_VAL_CROP_RATIO: 0.875
  LOADER_CHUNK_OVERALL_SIZE: 0
  LOADER_CHUNK_SIZE: 0
  MEAN: [0.48145466, 0.4578275, 0.40821073]
  MULTI_LABEL: False
  NUM_FRAMES: 8
  PATH_LABEL_SEPARATOR: ,
  PATH_PREFIX: /mnt/SSD8T/home/huangwei/projects/FROSTER/data/ssv2/videos
  PATH_TO_DATA_DIR: /mnt/SSD8T/home/huangwei/projects/FROSTER/zs_label_db/B2N_ssv2
  PATH_TO_PRELOAD_IMDB: 
  RANDOM_FLIP: True
  REVERSE_INPUT_CHANNEL: False
  SAMPLING_RATE: 16
  SKIP_ROWS: 0
  SSL_BLUR_SIGMA_MAX: [0.0, 2.0]
  SSL_BLUR_SIGMA_MIN: [0.0, 0.1]
  SSL_COLOR_BRI_CON_SAT: [0.4, 0.4, 0.4]
  SSL_COLOR_HUE: 0.1
  SSL_COLOR_JITTER: False
  SSL_MOCOV2_AUG: False
  STD: [0.26862954, 0.26130258, 0.27577711]
  TARGET_FPS: 30
  TEST_CROP_SIZE: 224
  TIME_DIFF_PROB: 0.0
  TRAIN_CROP_NUM_SPATIAL: 1
  TRAIN_CROP_NUM_TEMPORAL: 1
  TRAIN_CROP_SIZE: 224
  TRAIN_JITTER_ASPECT_RELATIVE: []
  TRAIN_JITTER_FPS: 0.0
  TRAIN_JITTER_MOTION_SHIFT: False
  TRAIN_JITTER_SCALES: [224, 256]
  TRAIN_JITTER_SCALES_RELATIVE: []
  TRAIN_PCA_EIGVAL: [0.225, 0.224, 0.229]
  TRAIN_PCA_EIGVEC: [[-0.5675, 0.7192, 0.4009], [-0.5808, -0.0045, -0.814], [-0.5836, -0.6948, 0.4203]]
  USE_OFFSET_SAMPLING: True
DATA_LOADER:
  ENABLE_MULTI_THREAD_DECODE: False
  NUM_WORKERS: 4
  PIN_MEMORY: True
DEMO:
  BUFFER_SIZE: 0
  CLIP_VIS_SIZE: 10
  COMMON_CLASS_NAMES: ['watch (a person)', 'talk to (e.g., self, a person, a group)', 'listen to (a person)', 'touch (an object)', 'carry/hold (an object)', 'walk', 'sit', 'lie/sleep', 'bend/bow (at the waist)']
  COMMON_CLASS_THRES: 0.7
  DETECTRON2_CFG: COCO-Detection/faster_rcnn_R_50_FPN_3x.yaml
  DETECTRON2_THRESH: 0.9
  DETECTRON2_WEIGHTS: detectron2://COCO-Detection/faster_rcnn_R_50_FPN_3x/137849458/model_final_280758.pkl
  DISPLAY_HEIGHT: 0
  DISPLAY_WIDTH: 0
  ENABLE: False
  FPS: 30
  GT_BOXES: 
  INPUT_FORMAT: BGR
  INPUT_VIDEO: 
  LABEL_FILE_PATH: 
  NUM_CLIPS_SKIP: 0
  NUM_VIS_INSTANCES: 2
  OUTPUT_FILE: 
  OUTPUT_FPS: -1
  PREDS_BOXES: 
  SLOWMO: 1
  STARTING_SECOND: 900
  THREAD_ENABLE: False
  UNCOMMON_CLASS_THRES: 0.3
  VIS_MODE: thres
  WEBCAM: -1
DETECTION:
  ALIGNED: True
  ENABLE: False
  ROI_XFORM_RESOLUTION: 7
  SPATIAL_SCALE_FACTOR: 16
DIST_BACKEND: nccl
IMAGENET_SIMPLELABEL_PATH: None
LOG_MODEL_INFO: True
LOG_PERIOD: 10
MASK:
  DECODER_DEPTH: 0
  DECODER_EMBED_DIM: 512
  DECODER_SEP_POS_EMBED: False
  DEC_KV_KERNEL: []
  DEC_KV_STRIDE: []
  ENABLE: False
  HEAD_TYPE: separate
  MAE_ON: False
  MAE_RND_MASK: False
  NORM_PRED_PIXEL: True
  PER_FRAME_MASKING: False
  PRED_HOG: False
  PRETRAIN_DEPTH: [15]
  SCALE_INIT_BY_DEPTH: False
  TIME_STRIDE_LOSS: True
MIXUP:
  ALPHA: 0.8
  CUTMIX_ALPHA: 1.0
  ENABLE: False
  LABEL_SMOOTH_VALUE: 0.1
  PROB: 1.0
  SWITCH_PROB: 0.5
MODEL:
  ACT_CHECKPOINT: False
  ADAPT_FINETUNE_FACTOR: 1.0
  ARCH: vitb16
  CLS_LOSS_RATIO: 1.0
  CONTEXT_LENGTH: 77
  DEFAULT_FINETUNE_FACTOR: 1.0
  DETACH_FINAL_FC: False
  DISTILLATION_RATIO: 2.0
  DROPCONNECT_RATE: 0.0
  DROPOUT_RATE: 0.5
  ENSEMBLE_PRED: False
  ENSEMBLE_RAWMODEL_RATIO: 0.0
  EXPERT_FINETUNE_FACTOR: 1.0
  EXPERT_INSERT_LAYERS: [10, 11]
  FC_INIT_STD: 0.01
  FINETUNE_FACTOR: 1.0
  FP16_ALLREDUCE: False
  FROZEN_BN: False
  HEAD_ACT: softmax
  KEEP_RAW_MODEL: False
  LOSS_FREQ_TYPE: mse
  LOSS_FUNC: cross_entropy
  MLP_FINETUNE_FACTOR: 1.0
  MODEL_NAME: TemporalClipVideo
  MULTI_PATHWAY_ARCH: ['slowfast']
  NUM_CLASSES: 87
  NUM_EXPERTS: 0
  PROMPT_NUM: 1
  RAW_MODEL_DISTILLATION: False
  RECORD_ROUTING: False
  ROUTING_FINETUNE_FACTOR: 1.0
  ROUTING_FREQUENCE_CONSTRAIN: 0.5
  ROUTING_FREQ_CONS_FACTOR: 1.0
  ROUTING_TYPE: patch-level
  SINGLE_PATHWAY_ARCH: ['2d', 'c2d', 'i3d', 'slow', 'x3d', 'mvit', 'maskmvit', 'vitb32', 'vitb16', 'vitl14']
  STATIC_GRAPH: False
  TEMPORAL_MODELING_TYPE: expand_temporal_view
  TEXT_PROMPT: False
  USE_CHECKPOINT: False
MULTIGRID:
  BN_BASE_SIZE: 8
  DEFAULT_B: 0
  DEFAULT_S: 0
  DEFAULT_T: 0
  EPOCH_FACTOR: 1.5
  EVAL_FREQ: 3
  LONG_CYCLE: False
  LONG_CYCLE_FACTORS: [(0.25, 0.7071067811865476), (0.5, 0.7071067811865476), (0.5, 1), (1, 1)]
  LONG_CYCLE_SAMPLING_RATE: 0
  SHORT_CYCLE: False
  SHORT_CYCLE_FACTORS: [0.5, 0.7071067811865476]
MVIT:
  CLS_EMBED_ON: True
  DEPTH: 16
  DIM_MUL: []
  DIM_MUL_IN_ATT: False
  DROPOUT_RATE: 0.0
  DROPPATH_RATE: 0.1
  EMBED_DIM: 96
  HEAD_INIT_SCALE: 1.0
  HEAD_MUL: []
  LAYER_SCALE_INIT_VALUE: 0.0
  MLP_RATIO: 4.0
  MODE: conv
  NORM: layernorm
  NORM_STEM: False
  NUM_HEADS: 1
  PATCH_2D: False
  PATCH_KERNEL: [3, 7, 7]
  PATCH_PADDING: [2, 4, 4]
  PATCH_STRIDE: [2, 4, 4]
  POOL_FIRST: False
  POOL_KVQ_KERNEL: None
  POOL_KV_STRIDE: []
  POOL_KV_STRIDE_ADAPTIVE: None
  POOL_Q_STRIDE: []
  QKV_BIAS: True
  REL_POS_SPATIAL: False
  REL_POS_TEMPORAL: False
  REL_POS_ZERO_INIT: False
  RESIDUAL_POOLING: False
  REV:
    BUFFER_LAYERS: []
    ENABLE: False
    PRE_Q_FUSION: avg
    RESPATH_FUSE: concat
    RES_PATH: conv
  SEPARATE_QKV: False
  SEP_POS_EMBED: False
  USE_ABS_POS: True
  USE_FIXED_SINCOS_POS: False
  USE_MEAN_POOLING: False
  ZERO_DECAY_POS_CLS: True
NONLOCAL:
  GROUP: [[1], [1], [1], [1]]
  INSTANTIATION: dot_product
  LOCATION: [[[]], [[]], [[]], [[]]]
  POOL: [[[1, 2, 2], [1, 2, 2]], [[1, 2, 2], [1, 2, 2]], [[1, 2, 2], [1, 2, 2]], [[1, 2, 2], [1, 2, 2]]]
NUM_GPUS: 1
NUM_SHARDS: 1
OUTPUT_DIR: /mnt/SSD8T/home/huangwei/projects/FROSTER/checkpoints/basetraining/B2N_ssv2_froster/testing
RESNET:
  DEPTH: 50
  INPLACE_RELU: True
  NUM_BLOCK_TEMP_KERNEL: [[3], [4], [6], [3]]
  NUM_GROUPS: 1
  SPATIAL_DILATIONS: [[1], [1], [1], [1]]
  SPATIAL_STRIDES: [[1], [2], [2], [2]]
  STRIDE_1X1: False
  TRANS_FUNC: bottleneck_transform
  WIDTH_PER_GROUP: 64
  ZERO_INIT_FINAL_BN: False
  ZERO_INIT_FINAL_CONV: False
RNG_SEED: 0
SHARD_ID: 0
SLOWFAST:
  ALPHA: 8
  BETA_INV: 8
  FUSION_CONV_CHANNEL_RATIO: 2
  FUSION_KERNEL_SZ: 5
SOLVER:
  BASE_LR: 3.33e-06
  BASE_LR_SCALE_NUM_SHARDS: True
  BETAS: (0.9, 0.999)
  CLIP_GRAD_L2NORM: 1.0
  CLIP_GRAD_VAL: None
  COSINE_AFTER_WARMUP: True
  COSINE_END_LR: 1e-07
  COSINE_RESTART_EPOCH: 0
  DAMPENING: 0.0
  GAMMA: 0.1
  LARS_ON: False
  LAYER_DECAY: 1.0
  LRS: []
  LR_POLICY: cosine
  MAX_EPOCH: 22
  MOMENTUM: 0.9
  NESTEROV: True
  OPTIMIZING_METHOD: adamw
  STEPS: []
  STEP_SIZE: 1
  WARMUP_EPOCHS: 2.0
  WARMUP_FACTOR: 0.1
  WARMUP_START_LR: 1e-07
  WEIGHT_DECAY: 0.01
  ZERO_WD_1D_PARAM: True
TASK: 
TENSORBOARD:
  CATEGORIES_PATH: 
  CLASS_NAMES_PATH: 
  CONFUSION_MATRIX:
    ENABLE: False
    FIGSIZE: [8, 8]
    SUBSET_PATH: 
  ENABLE: False
  HISTOGRAM:
    ENABLE: False
    FIGSIZE: [8, 8]
    SUBSET_PATH: 
    TOPK: 10
  LOG_DIR: 
  MODEL_VIS:
    ACTIVATIONS: False
    COLORMAP: Pastel2
    ENABLE: False
    GRAD_CAM:
      COLORMAP: viridis
      ENABLE: True
      LAYER_LIST: []
      USE_TRUE_LABEL: False
    INPUT_VIDEO: False
    LAYER_LIST: []
    MODEL_WEIGHTS: False
    TOPK_PREDS: 1
  PREDICTIONS_PATH: 
  WRONG_PRED_VIS:
    ENABLE: False
    SUBSET_PATH: 
    TAG: Incorrectly classified videos.
TEST:
  BATCH_SIZE: 90
  CHECKPOINT_FILE_PATH: 
  CHECKPOINT_TYPE: pytorch
  CLIP_ORI_PATH: /mnt/SSD8T/home/huangwei/.cache/clip/ViT-B-16.pt
  CUSTOM_LOAD: True
  CUSTOM_LOAD_FILE: /mnt/SSD8T/home/huangwei/projects/FROSTER/checkpoints/basetraining/B2N_ssv2_froster_exp02/checkpoints/checkpoint_epoch_00012.pyth
  DATASET: kinetics
  ENABLE: True
  NUM_ENSEMBLE_VIEWS: 3
  NUM_SPATIAL_CROPS: 1
  NUM_TEMPORAL_CLIPS: [3]
  OPENSET: False
  PATCHING_MODEL: False
  PATCHING_RATIO: 0.5
  SAVE_RESULTS_PATH: temp.pyth
  UPDATE_STATE: False
TEST_FILE: val.csv
TRAIN:
  ADAPT_ZS_CONS_RATIO: False
  AUTO_RESUME: True
  BATCH_SIZE: 64
  CHECKPOINT_CLEAR_NAME_PATTERN: ()
  CHECKPOINT_EPOCH_RESET: False
  CHECKPOINT_FILE_PATH: 
  CHECKPOINT_INFLATE: False
  CHECKPOINT_IN_INIT: False
  CHECKPOINT_PERIOD: 5
  CHECKPOINT_TYPE: pytorch
  CLIP_ORI_PATH: None
  CUSTOM_LOAD: False
  CUSTOM_LOAD_FILE: None
  DATASET: kinetics
  ENABLE: False
  EVAL_PERIOD: 5
  EWC_CONSTRAIN_RATIO: 1.0
  EWC_IDENTITY_FISHER: False
  EWC_IGNORE_LOGIT_SCALE: False
  EWC_LOAD_FILE: None
  EWC_SET: False
  KILL_LOSS_EXPLOSION_FACTOR: 0.0
  LINEAR_CONNECT_CLIMB: False
  LINEAR_CONNECT_LOSS_RATIO: 1.0
  LINEAR_CONNECT_SAMPLE: True
  LINEAR_CONNECT_SAMPLE_L: 0.4
  LINEAR_CONNECT_SAMPLE_R: 0.6
  MIXED_PRECISION: False
  ZS_CONS: False
  ZS_CONS_RATIO: 0.8
  ZS_INIT_CONS: False
  ZS_RESTART_CONS: False
  ZS_RESTART_EPOCH: -1
TRAIN_FILE: train.csv
TUNE_HEAD: False
VAL_FILE: val.csv
VAL_MODE: False
VIS_MASK:
  ENABLE: False
X3D:
  BN_LIN5: False
  BOTTLENECK_FACTOR: 1.0
  CHANNELWISE_3x3x3: True
  DEPTH_FACTOR: 1.0
  DIM_C1: 12
  DIM_C5: 2048
  SCALE_RES2: False
  WIDTH_FACTOR: 1.0
[12/17 11:00:42][INFO] temporalclip_video_model.py:  657: load pretrained CLIP:<All keys matched successfully>
[12/17 11:00:48][INFO] test_net.py:  333: Loading custom network weights from /mnt/SSD8T/home/huangwei/projects/FROSTER/checkpoints/basetraining/B2N_ssv2_froster_exp02/checkpoints/checkpoint_epoch_00012.pyth.
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.positional_embedding
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.text_projection
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.logit_scale
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.class_embedding
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.positional_embedding
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.proj
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.conv1.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.ln_pre.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.ln_pre.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.0.attn.in_proj_weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.0.attn.in_proj_bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.0.attn.out_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.0.attn.out_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.0.ln_1.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.0.ln_1.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.0.mlp.c_fc.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.0.mlp.c_fc.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.0.mlp.c_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.0.mlp.c_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.0.ln_2.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.0.ln_2.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.1.attn.in_proj_weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.1.attn.in_proj_bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.1.attn.out_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.1.attn.out_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.1.ln_1.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.1.ln_1.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.1.mlp.c_fc.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.1.mlp.c_fc.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.1.mlp.c_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.1.mlp.c_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.1.ln_2.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.1.ln_2.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.2.attn.in_proj_weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.2.attn.in_proj_bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.2.attn.out_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.2.attn.out_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.2.ln_1.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.2.ln_1.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.2.mlp.c_fc.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.2.mlp.c_fc.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.2.mlp.c_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.2.mlp.c_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.2.ln_2.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.2.ln_2.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.3.attn.in_proj_weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.3.attn.in_proj_bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.3.attn.out_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.3.attn.out_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.3.ln_1.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.3.ln_1.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.3.mlp.c_fc.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.3.mlp.c_fc.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.3.mlp.c_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.3.mlp.c_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.3.ln_2.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.3.ln_2.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.4.attn.in_proj_weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.4.attn.in_proj_bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.4.attn.out_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.4.attn.out_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.4.ln_1.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.4.ln_1.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.4.mlp.c_fc.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.4.mlp.c_fc.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.4.mlp.c_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.4.mlp.c_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.4.ln_2.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.4.ln_2.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.5.attn.in_proj_weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.5.attn.in_proj_bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.5.attn.out_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.5.attn.out_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.5.ln_1.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.5.ln_1.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.5.mlp.c_fc.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.5.mlp.c_fc.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.5.mlp.c_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.5.mlp.c_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.5.ln_2.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.5.ln_2.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.6.attn.in_proj_weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.6.attn.in_proj_bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.6.attn.out_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.6.attn.out_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.6.ln_1.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.6.ln_1.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.6.mlp.c_fc.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.6.mlp.c_fc.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.6.mlp.c_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.6.mlp.c_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.6.ln_2.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.6.ln_2.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.7.attn.in_proj_weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.7.attn.in_proj_bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.7.attn.out_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.7.attn.out_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.7.ln_1.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.7.ln_1.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.7.mlp.c_fc.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.7.mlp.c_fc.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.7.mlp.c_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.7.mlp.c_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.7.ln_2.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.7.ln_2.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.8.attn.in_proj_weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.8.attn.in_proj_bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.8.attn.out_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.8.attn.out_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.8.ln_1.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.8.ln_1.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.8.mlp.c_fc.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.8.mlp.c_fc.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.8.mlp.c_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.8.mlp.c_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.8.ln_2.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.8.ln_2.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.9.attn.in_proj_weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.9.attn.in_proj_bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.9.attn.out_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.9.attn.out_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.9.ln_1.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.9.ln_1.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.9.mlp.c_fc.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.9.mlp.c_fc.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.9.mlp.c_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.9.mlp.c_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.9.ln_2.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.9.ln_2.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.10.attn.in_proj_weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.10.attn.in_proj_bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.10.attn.out_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.10.attn.out_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.10.ln_1.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.10.ln_1.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.10.mlp.c_fc.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.10.mlp.c_fc.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.10.mlp.c_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.10.mlp.c_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.10.ln_2.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.10.ln_2.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.11.attn.in_proj_weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.11.attn.in_proj_bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.11.attn.out_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.11.attn.out_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.11.ln_1.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.11.ln_1.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.11.mlp.c_fc.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.11.mlp.c_fc.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.11.mlp.c_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.11.mlp.c_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.11.ln_2.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.transformer.resblocks.11.ln_2.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.ln_post.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.visual.ln_post.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.0.attn.in_proj_weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.0.attn.in_proj_bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.0.attn.out_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.0.attn.out_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.0.ln_1.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.0.ln_1.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.0.mlp.c_fc.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.0.mlp.c_fc.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.0.mlp.c_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.0.mlp.c_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.0.ln_2.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.0.ln_2.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.1.attn.in_proj_weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.1.attn.in_proj_bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.1.attn.out_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.1.attn.out_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.1.ln_1.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.1.ln_1.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.1.mlp.c_fc.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.1.mlp.c_fc.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.1.mlp.c_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.1.mlp.c_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.1.ln_2.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.1.ln_2.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.2.attn.in_proj_weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.2.attn.in_proj_bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.2.attn.out_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.2.attn.out_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.2.ln_1.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.2.ln_1.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.2.mlp.c_fc.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.2.mlp.c_fc.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.2.mlp.c_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.2.mlp.c_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.2.ln_2.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.2.ln_2.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.3.attn.in_proj_weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.3.attn.in_proj_bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.3.attn.out_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.3.attn.out_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.3.ln_1.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.3.ln_1.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.3.mlp.c_fc.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.3.mlp.c_fc.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.3.mlp.c_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.3.mlp.c_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.3.ln_2.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.3.ln_2.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.4.attn.in_proj_weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.4.attn.in_proj_bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.4.attn.out_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.4.attn.out_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.4.ln_1.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.4.ln_1.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.4.mlp.c_fc.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.4.mlp.c_fc.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.4.mlp.c_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.4.mlp.c_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.4.ln_2.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.4.ln_2.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.5.attn.in_proj_weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.5.attn.in_proj_bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.5.attn.out_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.5.attn.out_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.5.ln_1.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.5.ln_1.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.5.mlp.c_fc.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.5.mlp.c_fc.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.5.mlp.c_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.5.mlp.c_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.5.ln_2.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.5.ln_2.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.6.attn.in_proj_weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.6.attn.in_proj_bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.6.attn.out_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.6.attn.out_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.6.ln_1.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.6.ln_1.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.6.mlp.c_fc.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.6.mlp.c_fc.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.6.mlp.c_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.6.mlp.c_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.6.ln_2.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.6.ln_2.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.7.attn.in_proj_weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.7.attn.in_proj_bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.7.attn.out_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.7.attn.out_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.7.ln_1.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.7.ln_1.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.7.mlp.c_fc.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.7.mlp.c_fc.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.7.mlp.c_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.7.mlp.c_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.7.ln_2.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.7.ln_2.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.8.attn.in_proj_weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.8.attn.in_proj_bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.8.attn.out_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.8.attn.out_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.8.ln_1.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.8.ln_1.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.8.mlp.c_fc.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.8.mlp.c_fc.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.8.mlp.c_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.8.mlp.c_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.8.ln_2.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.8.ln_2.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.9.attn.in_proj_weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.9.attn.in_proj_bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.9.attn.out_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.9.attn.out_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.9.ln_1.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.9.ln_1.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.9.mlp.c_fc.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.9.mlp.c_fc.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.9.mlp.c_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.9.mlp.c_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.9.ln_2.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.9.ln_2.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.10.attn.in_proj_weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.10.attn.in_proj_bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.10.attn.out_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.10.attn.out_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.10.ln_1.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.10.ln_1.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.10.mlp.c_fc.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.10.mlp.c_fc.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.10.mlp.c_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.10.mlp.c_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.10.ln_2.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.10.ln_2.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.11.attn.in_proj_weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.11.attn.in_proj_bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.11.attn.out_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.11.attn.out_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.11.ln_1.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.11.ln_1.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.11.mlp.c_fc.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.11.mlp.c_fc.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.11.mlp.c_proj.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.11.mlp.c_proj.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.11.ln_2.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.transformer.resblocks.11.ln_2.bias
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.token_embedding.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.ln_final.weight
[12/17 11:00:53][INFO] test_net.py:  404: missing parameters
[12/17 11:00:53][INFO] test_net.py:  405: raw_model.ln_final.bias
[12/17 11:00:53][INFO] misc.py:  185: Model:
TemporalClipVideo(
  (model): WCLIP(
    (visual): TemporalVisionTransformer(
      (conv1): Conv2d(3, 768, kernel_size=(16, 16), stride=(16, 16), bias=False)
      (ln_pre): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
      (transformer): TSTransformer(
        (resblocks): Sequential(
          (0): TimesAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (1): TimesAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (2): TimesAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (3): TimesAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (4): TimesAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (5): TimesAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (6): TimesAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (7): TimesAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (8): TimesAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (9): TimesAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (10): TimesAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (11): TimesAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
      (ln_post): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
    )
    (transformer): Transformer(
      (resblocks): Sequential(
        (0): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
          )
          (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (mlp): Sequential(
            (c_fc): Linear(in_features=512, out_features=2048, bias=True)
            (gelu): QuickGELU()
            (c_proj): Linear(in_features=2048, out_features=512, bias=True)
          )
          (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
        (1): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
          )
          (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (mlp): Sequential(
            (c_fc): Linear(in_features=512, out_features=2048, bias=True)
            (gelu): QuickGELU()
            (c_proj): Linear(in_features=2048, out_features=512, bias=True)
          )
          (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
        (2): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
          )
          (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (mlp): Sequential(
            (c_fc): Linear(in_features=512, out_features=2048, bias=True)
            (gelu): QuickGELU()
            (c_proj): Linear(in_features=2048, out_features=512, bias=True)
          )
          (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
        (3): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
          )
          (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (mlp): Sequential(
            (c_fc): Linear(in_features=512, out_features=2048, bias=True)
            (gelu): QuickGELU()
            (c_proj): Linear(in_features=2048, out_features=512, bias=True)
          )
          (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
        (4): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
          )
          (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (mlp): Sequential(
            (c_fc): Linear(in_features=512, out_features=2048, bias=True)
            (gelu): QuickGELU()
            (c_proj): Linear(in_features=2048, out_features=512, bias=True)
          )
          (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
        (5): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
          )
          (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (mlp): Sequential(
            (c_fc): Linear(in_features=512, out_features=2048, bias=True)
            (gelu): QuickGELU()
            (c_proj): Linear(in_features=2048, out_features=512, bias=True)
          )
          (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
        (6): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
          )
          (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (mlp): Sequential(
            (c_fc): Linear(in_features=512, out_features=2048, bias=True)
            (gelu): QuickGELU()
            (c_proj): Linear(in_features=2048, out_features=512, bias=True)
          )
          (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
        (7): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
          )
          (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (mlp): Sequential(
            (c_fc): Linear(in_features=512, out_features=2048, bias=True)
            (gelu): QuickGELU()
            (c_proj): Linear(in_features=2048, out_features=512, bias=True)
          )
          (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
        (8): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
          )
          (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (mlp): Sequential(
            (c_fc): Linear(in_features=512, out_features=2048, bias=True)
            (gelu): QuickGELU()
            (c_proj): Linear(in_features=2048, out_features=512, bias=True)
          )
          (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
        (9): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
          )
          (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (mlp): Sequential(
            (c_fc): Linear(in_features=512, out_features=2048, bias=True)
            (gelu): QuickGELU()
            (c_proj): Linear(in_features=2048, out_features=512, bias=True)
          )
          (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
        (10): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
          )
          (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (mlp): Sequential(
            (c_fc): Linear(in_features=512, out_features=2048, bias=True)
            (gelu): QuickGELU()
            (c_proj): Linear(in_features=2048, out_features=512, bias=True)
          )
          (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
        (11): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
          )
          (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (mlp): Sequential(
            (c_fc): Linear(in_features=512, out_features=2048, bias=True)
            (gelu): QuickGELU()
            (c_proj): Linear(in_features=2048, out_features=512, bias=True)
          )
          (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
      )
    )
    (token_embedding): Embedding(49408, 512)
    (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
  )
  (projector_v): Sequential(
    (0): Linear(in_features=512, out_features=512, bias=False)
    (1): GELU()
    (2): Linear(in_features=512, out_features=512, bias=False)
  )
  (projector_t): Sequential(
    (0): Linear(in_features=512, out_features=512, bias=False)
    (1): GELU()
    (2): Linear(in_features=512, out_features=512, bias=False)
  )
)
[12/17 11:00:53][INFO] misc.py:  187: Params: 150,669,313
[12/17 11:00:53][INFO] misc.py:  188: Mem: 0.7674283981323242 MB
[12/17 11:00:53][INFO] misc.py:  197: nvidia-smi
Tue Dec 17 11:00:53 2024       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 525.125.06   Driver Version: 525.125.06   CUDA Version: 12.0     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  NVIDIA GeForce ...  Off  | 00000000:01:00.0 Off |                  Off |
| 42%   24C    P2    56W / 450W |   2918MiB / 24564MiB |      7%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   1  NVIDIA GeForce ...  Off  | 00000000:23:00.0 Off |                  Off |
| 41%   22C    P8    21W / 450W |      8MiB / 24564MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   2  NVIDIA GeForce ...  Off  | 00000000:41:00.0 Off |                  Off |
| 41%   23C    P8    23W / 450W |      8MiB / 24564MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   3  NVIDIA GeForce ...  Off  | 00000000:61:00.0 Off |                  Off |
| 40%   22C    P8    18W / 450W |      8MiB / 24564MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   4  NVIDIA GeForce ...  Off  | 00000000:81:00.0 Off |                  Off |
| 42%   23C    P8    27W / 450W |      8MiB / 24564MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   5  NVIDIA GeForce ...  Off  | 00000000:A1:00.0 Off |                  Off |
| 41%   22C    P8    28W / 450W |      8MiB / 24564MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   6  NVIDIA GeForce ...  Off  | 00000000:C1:00.0 Off |                  Off |
| 42%   23C    P8    14W / 450W |      8MiB / 24564MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   7  NVIDIA GeForce ...  Off  | 00000000:E1:00.0 Off |                  Off |
| 40%   22C    P8    21W / 450W |      8MiB / 24564MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
|    0   N/A  N/A      3082      G   /usr/lib/xorg/Xorg                  4MiB |
|    0   N/A  N/A   1408672      C   python                           2910MiB |
|    1   N/A  N/A      3082      G   /usr/lib/xorg/Xorg                  4MiB |
|    2   N/A  N/A      3082      G   /usr/lib/xorg/Xorg                  4MiB |
|    3   N/A  N/A      3082      G   /usr/lib/xorg/Xorg                  4MiB |
|    4   N/A  N/A      3082      G   /usr/lib/xorg/Xorg                  4MiB |
|    5   N/A  N/A      3082      G   /usr/lib/xorg/Xorg                  4MiB |
|    6   N/A  N/A      3082      G   /usr/lib/xorg/Xorg                  4MiB |
|    7   N/A  N/A      3082      G   /usr/lib/xorg/Xorg                  4MiB |
+-----------------------------------------------------------------------------+
[12/17 11:00:54][INFO] misc.py:  185: Model:
TemporalClipVideo(
  (model): WCLIP(
    (visual): TemporalVisionTransformer(
      (conv1): Conv2d(3, 768, kernel_size=(16, 16), stride=(16, 16), bias=False)
      (ln_pre): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
      (transformer): TSTransformer(
        (resblocks): Sequential(
          (0): TimesAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (1): TimesAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (2): TimesAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (3): TimesAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (4): TimesAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (5): TimesAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (6): TimesAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (7): TimesAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (8): TimesAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (9): TimesAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (10): TimesAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (11): TimesAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
      (ln_post): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
    )
    (transformer): Transformer(
      (resblocks): Sequential(
        (0): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
          )
          (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (mlp): Sequential(
            (c_fc): Linear(in_features=512, out_features=2048, bias=True)
            (gelu): QuickGELU()
            (c_proj): Linear(in_features=2048, out_features=512, bias=True)
          )
          (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
        (1): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
          )
          (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (mlp): Sequential(
            (c_fc): Linear(in_features=512, out_features=2048, bias=True)
            (gelu): QuickGELU()
            (c_proj): Linear(in_features=2048, out_features=512, bias=True)
          )
          (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
        (2): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
          )
          (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (mlp): Sequential(
            (c_fc): Linear(in_features=512, out_features=2048, bias=True)
            (gelu): QuickGELU()
            (c_proj): Linear(in_features=2048, out_features=512, bias=True)
          )
          (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
        (3): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
          )
          (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (mlp): Sequential(
            (c_fc): Linear(in_features=512, out_features=2048, bias=True)
            (gelu): QuickGELU()
            (c_proj): Linear(in_features=2048, out_features=512, bias=True)
          )
          (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
        (4): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
          )
          (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (mlp): Sequential(
            (c_fc): Linear(in_features=512, out_features=2048, bias=True)
            (gelu): QuickGELU()
            (c_proj): Linear(in_features=2048, out_features=512, bias=True)
          )
          (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
        (5): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
          )
          (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (mlp): Sequential(
            (c_fc): Linear(in_features=512, out_features=2048, bias=True)
            (gelu): QuickGELU()
            (c_proj): Linear(in_features=2048, out_features=512, bias=True)
          )
          (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
        (6): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
          )
          (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (mlp): Sequential(
            (c_fc): Linear(in_features=512, out_features=2048, bias=True)
            (gelu): QuickGELU()
            (c_proj): Linear(in_features=2048, out_features=512, bias=True)
          )
          (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
        (7): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
          )
          (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (mlp): Sequential(
            (c_fc): Linear(in_features=512, out_features=2048, bias=True)
            (gelu): QuickGELU()
            (c_proj): Linear(in_features=2048, out_features=512, bias=True)
          )
          (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
        (8): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
          )
          (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (mlp): Sequential(
            (c_fc): Linear(in_features=512, out_features=2048, bias=True)
            (gelu): QuickGELU()
            (c_proj): Linear(in_features=2048, out_features=512, bias=True)
          )
          (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
        (9): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
          )
          (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (mlp): Sequential(
            (c_fc): Linear(in_features=512, out_features=2048, bias=True)
            (gelu): QuickGELU()
            (c_proj): Linear(in_features=2048, out_features=512, bias=True)
          )
          (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
        (10): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
          )
          (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (mlp): Sequential(
            (c_fc): Linear(in_features=512, out_features=2048, bias=True)
            (gelu): QuickGELU()
            (c_proj): Linear(in_features=2048, out_features=512, bias=True)
          )
          (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
        (11): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
          )
          (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (mlp): Sequential(
            (c_fc): Linear(in_features=512, out_features=2048, bias=True)
            (gelu): QuickGELU()
            (c_proj): Linear(in_features=2048, out_features=512, bias=True)
          )
          (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
      )
    )
    (token_embedding): Embedding(49408, 512)
    (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
  )
  (projector_v): Sequential(
    (0): Linear(in_features=512, out_features=512, bias=False)
    (1): GELU()
    (2): Linear(in_features=512, out_features=512, bias=False)
  )
  (projector_t): Sequential(
    (0): Linear(in_features=512, out_features=512, bias=False)
    (1): GELU()
    (2): Linear(in_features=512, out_features=512, bias=False)
  )
)
[12/17 11:00:54][INFO] misc.py:  187: Params: 150,669,313
[12/17 11:00:54][INFO] misc.py:  188: Mem: 0.7674283981323242 MB
[12/17 11:00:54][INFO] misc.py:  197: nvidia-smi
Tue Dec 17 11:00:54 2024       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 525.125.06   Driver Version: 525.125.06   CUDA Version: 12.0     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  NVIDIA GeForce ...  Off  | 00000000:01:00.0 Off |                  Off |
| 42%   24C    P2    57W / 450W |   2918MiB / 24564MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   1  NVIDIA GeForce ...  Off  | 00000000:23:00.0 Off |                  Off |
| 41%   22C    P8    21W / 450W |      8MiB / 24564MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   2  NVIDIA GeForce ...  Off  | 00000000:41:00.0 Off |                  Off |
| 41%   23C    P8    23W / 450W |      8MiB / 24564MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   3  NVIDIA GeForce ...  Off  | 00000000:61:00.0 Off |                  Off |
| 40%   22C    P8    18W / 450W |      8MiB / 24564MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   4  NVIDIA GeForce ...  Off  | 00000000:81:00.0 Off |                  Off |
| 42%   23C    P8    27W / 450W |      8MiB / 24564MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   5  NVIDIA GeForce ...  Off  | 00000000:A1:00.0 Off |                  Off |
| 41%   22C    P8    28W / 450W |      8MiB / 24564MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   6  NVIDIA GeForce ...  Off  | 00000000:C1:00.0 Off |                  Off |
| 42%   23C    P8    14W / 450W |      8MiB / 24564MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   7  NVIDIA GeForce ...  Off  | 00000000:E1:00.0 Off |                  Off |
| 40%   22C    P8    21W / 450W |      8MiB / 24564MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
|    0   N/A  N/A      3082      G   /usr/lib/xorg/Xorg                  4MiB |
|    0   N/A  N/A   1408672      C   python                           2910MiB |
|    1   N/A  N/A      3082      G   /usr/lib/xorg/Xorg                  4MiB |
|    2   N/A  N/A      3082      G   /usr/lib/xorg/Xorg                  4MiB |
|    3   N/A  N/A      3082      G   /usr/lib/xorg/Xorg                  4MiB |
|    4   N/A  N/A      3082      G   /usr/lib/xorg/Xorg                  4MiB |
|    5   N/A  N/A      3082      G   /usr/lib/xorg/Xorg                  4MiB |
|    6   N/A  N/A      3082      G   /usr/lib/xorg/Xorg                  4MiB |
|    7   N/A  N/A      3082      G   /usr/lib/xorg/Xorg                  4MiB |
+-----------------------------------------------------------------------------+
[12/17 11:00:55][INFO] kinetics.py:   94: Constructing Kinetics test...
path: ---------------------------- /mnt/SSD8T/home/huangwei/projects/FROSTER/zs_label_db/B2N_ssv2/val.csv
[12/17 11:00:55][INFO] kinetics.py:  172: Constructing kinetics dataloader (size: 52686 skip_rows 0) from /mnt/SSD8T/home/huangwei/projects/FROSTER/zs_label_db/B2N_ssv2/val.csv 
[12/17 11:00:55][INFO] test_net.py:  434: Testing model for 586 iterations
exponential temporal pooling in test
alpha:0.2
[12/17 11:01:24][INFO] logging.py:   99: json_stats: {"cur_iter": "1", "eta": "3:41:25", "split": "test_iter", "time_diff": 22.67091940}
exponential temporal pooling in test
alpha:0.2
[12/17 11:01:26][INFO] logging.py:   99: json_stats: {"cur_iter": "2", "eta": "0:16:24", "split": "test_iter", "time_diff": 1.68260526}
exponential temporal pooling in test
alpha:0.2
[12/17 11:01:28][INFO] logging.py:   99: json_stats: {"cur_iter": "3", "eta": "0:16:28", "split": "test_iter", "time_diff": 1.69300908}
exponential temporal pooling in test
alpha:0.2
[12/17 11:01:29][INFO] logging.py:   99: json_stats: {"cur_iter": "4", "eta": "0:16:26", "split": "test_iter", "time_diff": 1.69135477}
exponential temporal pooling in test
alpha:0.2
[12/17 11:01:38][INFO] logging.py:   99: json_stats: {"cur_iter": "5", "eta": "1:28:17", "split": "test_iter", "time_diff": 9.10171474}
exponential temporal pooling in test
alpha:0.2
[12/17 11:01:40][INFO] logging.py:   99: json_stats: {"cur_iter": "6", "eta": "0:16:24", "split": "test_iter", "time_diff": 1.69376418}
exponential temporal pooling in test
alpha:0.2
[12/17 11:01:42][INFO] logging.py:   99: json_stats: {"cur_iter": "7", "eta": "0:16:29", "split": "test_iter", "time_diff": 1.70579983}
exponential temporal pooling in test
alpha:0.2
[12/17 11:01:43][INFO] logging.py:   99: json_stats: {"cur_iter": "8", "eta": "0:16:20", "split": "test_iter", "time_diff": 1.69356271}
exponential temporal pooling in test
alpha:0.2
[12/17 11:01:53][INFO] logging.py:   99: json_stats: {"cur_iter": "9", "eta": "1:34:12", "split": "test_iter", "time_diff": 9.77864726}
exponential temporal pooling in test
alpha:0.2
[12/17 11:01:55][INFO] logging.py:   99: json_stats: {"cur_iter": "10", "eta": "0:16:22", "split": "test_iter", "time_diff": 1.70230319}
exponential temporal pooling in test
alpha:0.2
[12/17 11:01:57][INFO] logging.py:   99: json_stats: {"cur_iter": "11", "eta": "0:16:16", "split": "test_iter", "time_diff": 1.69503243}
exponential temporal pooling in test
alpha:0.2
[12/17 11:01:58][INFO] logging.py:   99: json_stats: {"cur_iter": "12", "eta": "0:16:18", "split": "test_iter", "time_diff": 1.70192068}
exponential temporal pooling in test
alpha:0.2
[12/17 11:02:09][INFO] logging.py:   99: json_stats: {"cur_iter": "13", "eta": "1:38:31", "split": "test_iter", "time_diff": 10.29957976}
exponential temporal pooling in test
alpha:0.2
[12/17 11:02:10][INFO] logging.py:   99: json_stats: {"cur_iter": "14", "eta": "0:16:09", "split": "test_iter", "time_diff": 1.69261260}
exponential temporal pooling in test
alpha:0.2
[12/17 11:02:12][INFO] logging.py:   99: json_stats: {"cur_iter": "15", "eta": "0:16:03", "split": "test_iter", "time_diff": 1.68504567}
exponential temporal pooling in test
alpha:0.2
[12/17 11:02:14][INFO] logging.py:   99: json_stats: {"cur_iter": "16", "eta": "0:16:07", "split": "test_iter", "time_diff": 1.69405229}
exponential temporal pooling in test
alpha:0.2
[12/17 11:02:23][INFO] logging.py:   99: json_stats: {"cur_iter": "17", "eta": "1:29:38", "split": "test_iter", "time_diff": 9.43672245}
exponential temporal pooling in test
alpha:0.2
[12/17 11:02:25][INFO] logging.py:   99: json_stats: {"cur_iter": "18", "eta": "0:15:58", "split": "test_iter", "time_diff": 1.68426330}
exponential temporal pooling in test
alpha:0.2
[12/17 11:02:27][INFO] logging.py:   99: json_stats: {"cur_iter": "19", "eta": "0:16:02", "split": "test_iter", "time_diff": 1.69495354}
exponential temporal pooling in test
alpha:0.2
[12/17 11:02:28][INFO] logging.py:   99: json_stats: {"cur_iter": "20", "eta": "0:16:00", "split": "test_iter", "time_diff": 1.69486576}
exponential temporal pooling in test
alpha:0.2
[12/17 11:02:39][INFO] logging.py:   99: json_stats: {"cur_iter": "21", "eta": "1:37:07", "split": "test_iter", "time_diff": 10.29680029}
exponential temporal pooling in test
alpha:0.2
[12/17 11:02:40][INFO] logging.py:   99: json_stats: {"cur_iter": "22", "eta": "0:15:57", "split": "test_iter", "time_diff": 1.69512804}
exponential temporal pooling in test
alpha:0.2
[12/17 11:02:42][INFO] logging.py:   99: json_stats: {"cur_iter": "23", "eta": "0:15:50", "split": "test_iter", "time_diff": 1.68499836}
exponential temporal pooling in test
alpha:0.2
[12/17 11:02:44][INFO] logging.py:   99: json_stats: {"cur_iter": "24", "eta": "0:15:53", "split": "test_iter", "time_diff": 1.69342338}
exponential temporal pooling in test
alpha:0.2
[12/17 11:02:53][INFO] logging.py:   99: json_stats: {"cur_iter": "25", "eta": "1:27:41", "split": "test_iter", "time_diff": 9.36249105}
exponential temporal pooling in test
alpha:0.2
[12/17 11:02:55][INFO] logging.py:   99: json_stats: {"cur_iter": "26", "eta": "0:15:50", "split": "test_iter", "time_diff": 1.69429802}
exponential temporal pooling in test
alpha:0.2
[12/17 11:02:56][INFO] logging.py:   99: json_stats: {"cur_iter": "27", "eta": "0:15:44", "split": "test_iter", "time_diff": 1.68645466}
exponential temporal pooling in test
alpha:0.2
[12/17 11:02:58][INFO] logging.py:   99: json_stats: {"cur_iter": "28", "eta": "0:15:50", "split": "test_iter", "time_diff": 1.70050337}
exponential temporal pooling in test
alpha:0.2
[12/17 11:03:08][INFO] logging.py:   99: json_stats: {"cur_iter": "29", "eta": "1:27:17", "split": "test_iter", "time_diff": 9.38707091}
exponential temporal pooling in test
alpha:0.2
[12/17 11:03:09][INFO] logging.py:   99: json_stats: {"cur_iter": "30", "eta": "0:15:44", "split": "test_iter", "time_diff": 1.69497885}
exponential temporal pooling in test
alpha:0.2
[12/17 11:03:11][INFO] logging.py:   99: json_stats: {"cur_iter": "31", "eta": "0:15:40", "split": "test_iter", "time_diff": 1.69130141}
exponential temporal pooling in test
alpha:0.2
[12/17 11:03:13][INFO] logging.py:   99: json_stats: {"cur_iter": "32", "eta": "0:15:43", "split": "test_iter", "time_diff": 1.69955117}
exponential temporal pooling in test
alpha:0.2
[12/17 11:03:22][INFO] logging.py:   99: json_stats: {"cur_iter": "33", "eta": "1:25:23", "split": "test_iter", "time_diff": 9.24748454}
exponential temporal pooling in test
alpha:0.2
[12/17 11:03:24][INFO] logging.py:   99: json_stats: {"cur_iter": "34", "eta": "0:16:08", "split": "test_iter", "time_diff": 1.75075830}
exponential temporal pooling in test
alpha:0.2
[12/17 11:03:25][INFO] logging.py:   99: json_stats: {"cur_iter": "35", "eta": "0:15:32", "split": "test_iter", "time_diff": 1.68885454}
exponential temporal pooling in test
alpha:0.2
[12/17 11:03:27][INFO] logging.py:   99: json_stats: {"cur_iter": "36", "eta": "0:15:38", "split": "test_iter", "time_diff": 1.70392795}
exponential temporal pooling in test
alpha:0.2
[12/17 11:03:37][INFO] logging.py:   99: json_stats: {"cur_iter": "37", "eta": "1:35:46", "split": "test_iter", "time_diff": 10.44884924}
exponential temporal pooling in test
alpha:0.2
[12/17 11:03:39][INFO] logging.py:   99: json_stats: {"cur_iter": "38", "eta": "0:15:32", "split": "test_iter", "time_diff": 1.69933965}
exponential temporal pooling in test
alpha:0.2
[12/17 11:03:41][INFO] logging.py:   99: json_stats: {"cur_iter": "39", "eta": "0:15:28", "split": "test_iter", "time_diff": 1.69363556}
exponential temporal pooling in test
alpha:0.2
[12/17 11:03:43][INFO] logging.py:   99: json_stats: {"cur_iter": "40", "eta": "0:15:22", "split": "test_iter", "time_diff": 1.68652471}
exponential temporal pooling in test
alpha:0.2
[12/17 11:03:52][INFO] logging.py:   99: json_stats: {"cur_iter": "41", "eta": "1:27:15", "split": "test_iter", "time_diff": 9.58827370}
exponential temporal pooling in test
alpha:0.2
[12/17 11:03:54][INFO] logging.py:   99: json_stats: {"cur_iter": "42", "eta": "0:17:03", "split": "test_iter", "time_diff": 1.87858195}
exponential temporal pooling in test
alpha:0.2
[12/17 11:03:56][INFO] logging.py:   99: json_stats: {"cur_iter": "43", "eta": "0:15:44", "split": "test_iter", "time_diff": 1.73573094}
exponential temporal pooling in test
alpha:0.2
[12/17 11:03:57][INFO] logging.py:   99: json_stats: {"cur_iter": "44", "eta": "0:15:22", "split": "test_iter", "time_diff": 1.69942804}
exponential temporal pooling in test
alpha:0.2
[12/17 11:04:07][INFO] logging.py:   99: json_stats: {"cur_iter": "45", "eta": "1:25:51", "split": "test_iter", "time_diff": 9.50382902}
exponential temporal pooling in test
alpha:0.2
[12/17 11:04:09][INFO] logging.py:   99: json_stats: {"cur_iter": "46", "eta": "0:22:04", "split": "test_iter", "time_diff": 2.44842640}
exponential temporal pooling in test
alpha:0.2
[12/17 11:04:11][INFO] logging.py:   99: json_stats: {"cur_iter": "47", "eta": "0:15:18", "split": "test_iter", "time_diff": 1.70034367}
exponential temporal pooling in test
alpha:0.2
[12/17 11:04:13][INFO] logging.py:   99: json_stats: {"cur_iter": "48", "eta": "0:15:14", "split": "test_iter", "time_diff": 1.69582259}
exponential temporal pooling in test
alpha:0.2
[12/17 11:04:23][INFO] logging.py:   99: json_stats: {"cur_iter": "49", "eta": "1:30:02", "split": "test_iter", "time_diff": 10.04186958}
exponential temporal pooling in test
alpha:0.2
[12/17 11:04:25][INFO] logging.py:   99: json_stats: {"cur_iter": "50", "eta": "0:15:10", "split": "test_iter", "time_diff": 1.69534795}
exponential temporal pooling in test
alpha:0.2
[12/17 11:04:26][INFO] logging.py:   99: json_stats: {"cur_iter": "51", "eta": "0:15:08", "split": "test_iter", "time_diff": 1.69580460}
exponential temporal pooling in test
alpha:0.2
[12/17 11:04:28][INFO] logging.py:   99: json_stats: {"cur_iter": "52", "eta": "0:15:07", "split": "test_iter", "time_diff": 1.69596349}
exponential temporal pooling in test
alpha:0.2
[12/17 11:04:38][INFO] logging.py:   99: json_stats: {"cur_iter": "53", "eta": "1:31:43", "split": "test_iter", "time_diff": 10.30549337}
exponential temporal pooling in test
alpha:0.2
[12/17 11:04:40][INFO] logging.py:   99: json_stats: {"cur_iter": "54", "eta": "0:15:36", "split": "test_iter", "time_diff": 1.75706291}
exponential temporal pooling in test
alpha:0.2
[12/17 11:04:42][INFO] logging.py:   99: json_stats: {"cur_iter": "55", "eta": "0:14:59", "split": "test_iter", "time_diff": 1.69161648}
exponential temporal pooling in test
alpha:0.2
[12/17 11:04:43][INFO] logging.py:   99: json_stats: {"cur_iter": "56", "eta": "0:15:03", "split": "test_iter", "time_diff": 1.70166729}
exponential temporal pooling in test
alpha:0.2
[12/17 11:04:54][INFO] logging.py:   99: json_stats: {"cur_iter": "57", "eta": "1:32:54", "split": "test_iter", "time_diff": 10.51852577}
exponential temporal pooling in test
alpha:0.2
[12/17 11:04:56][INFO] logging.py:   99: json_stats: {"cur_iter": "58", "eta": "0:15:02", "split": "test_iter", "time_diff": 1.70540924}
exponential temporal pooling in test
alpha:0.2
[12/17 11:04:57][INFO] logging.py:   99: json_stats: {"cur_iter": "59", "eta": "0:14:52", "split": "test_iter", "time_diff": 1.69097627}
exponential temporal pooling in test
alpha:0.2
[12/17 11:04:59][INFO] logging.py:   99: json_stats: {"cur_iter": "60", "eta": "0:14:58", "split": "test_iter", "time_diff": 1.70569551}
exponential temporal pooling in test
alpha:0.2
[12/17 11:05:09][INFO] logging.py:   99: json_stats: {"cur_iter": "61", "eta": "1:30:55", "split": "test_iter", "time_diff": 10.37118451}
exponential temporal pooling in test
alpha:0.2
[12/17 11:05:11][INFO] logging.py:   99: json_stats: {"cur_iter": "62", "eta": "0:15:20", "split": "test_iter", "time_diff": 1.75340392}
exponential temporal pooling in test
alpha:0.2
[12/17 11:05:13][INFO] logging.py:   99: json_stats: {"cur_iter": "63", "eta": "0:14:47", "split": "test_iter", "time_diff": 1.69392770}
exponential temporal pooling in test
alpha:0.2
[12/17 11:05:15][INFO] logging.py:   99: json_stats: {"cur_iter": "64", "eta": "0:14:49", "split": "test_iter", "time_diff": 1.70162661}
exponential temporal pooling in test
alpha:0.2
[12/17 11:05:25][INFO] logging.py:   99: json_stats: {"cur_iter": "65", "eta": "1:27:00", "split": "test_iter", "time_diff": 10.00176867}
exponential temporal pooling in test
alpha:0.2
[12/17 11:05:26][INFO] logging.py:   99: json_stats: {"cur_iter": "66", "eta": "0:15:18", "split": "test_iter", "time_diff": 1.76315240}
exponential temporal pooling in test
alpha:0.2
[12/17 11:05:28][INFO] logging.py:   99: json_stats: {"cur_iter": "67", "eta": "0:14:47", "split": "test_iter", "time_diff": 1.70618895}
exponential temporal pooling in test
alpha:0.2
[12/17 11:05:30][INFO] logging.py:   99: json_stats: {"cur_iter": "68", "eta": "0:14:43", "split": "test_iter", "time_diff": 1.70324242}
exponential temporal pooling in test
alpha:0.2
[12/17 11:05:40][INFO] logging.py:   99: json_stats: {"cur_iter": "69", "eta": "1:29:14", "split": "test_iter", "time_diff": 10.33600429}
exponential temporal pooling in test
alpha:0.2
[12/17 11:05:42][INFO] logging.py:   99: json_stats: {"cur_iter": "70", "eta": "0:14:38", "split": "test_iter", "time_diff": 1.69869074}
exponential temporal pooling in test
alpha:0.2
[12/17 11:05:44][INFO] logging.py:   99: json_stats: {"cur_iter": "71", "eta": "0:14:30", "split": "test_iter", "time_diff": 1.68621125}
exponential temporal pooling in test
alpha:0.2
[12/17 11:05:45][INFO] logging.py:   99: json_stats: {"cur_iter": "72", "eta": "0:14:36", "split": "test_iter", "time_diff": 1.70101446}
exponential temporal pooling in test
alpha:0.2
[12/17 11:05:56][INFO] logging.py:   99: json_stats: {"cur_iter": "73", "eta": "1:29:42", "split": "test_iter", "time_diff": 10.47265788}
exponential temporal pooling in test
alpha:0.2
[12/17 11:05:57][INFO] logging.py:   99: json_stats: {"cur_iter": "74", "eta": "0:14:34", "split": "test_iter", "time_diff": 1.70512766}
exponential temporal pooling in test
alpha:0.2
[12/17 11:05:59][INFO] logging.py:   99: json_stats: {"cur_iter": "75", "eta": "0:14:33", "split": "test_iter", "time_diff": 1.70564790}
exponential temporal pooling in test
alpha:0.2
[12/17 11:06:01][INFO] logging.py:   99: json_stats: {"cur_iter": "76", "eta": "0:14:23", "split": "test_iter", "time_diff": 1.68939838}
exponential temporal pooling in test
alpha:0.2
[12/17 11:06:11][INFO] logging.py:   99: json_stats: {"cur_iter": "77", "eta": "1:28:20", "split": "test_iter", "time_diff": 10.39347557}
exponential temporal pooling in test
alpha:0.2
[12/17 11:06:13][INFO] logging.py:   99: json_stats: {"cur_iter": "78", "eta": "0:14:26", "split": "test_iter", "time_diff": 1.70187506}
exponential temporal pooling in test
alpha:0.2
[12/17 11:06:15][INFO] logging.py:   99: json_stats: {"cur_iter": "79", "eta": "0:14:17", "split": "test_iter", "time_diff": 1.68846421}
exponential temporal pooling in test
alpha:0.2
[12/17 11:06:16][INFO] logging.py:   99: json_stats: {"cur_iter": "80", "eta": "0:14:23", "split": "test_iter", "time_diff": 1.70320261}
exponential temporal pooling in test
alpha:0.2
[12/17 11:06:27][INFO] logging.py:   99: json_stats: {"cur_iter": "81", "eta": "1:32:51", "split": "test_iter", "time_diff": 11.01131038}
exponential temporal pooling in test
alpha:0.2
[12/17 11:06:29][INFO] logging.py:   99: json_stats: {"cur_iter": "82", "eta": "0:14:16", "split": "test_iter", "time_diff": 1.69593988}
exponential temporal pooling in test
alpha:0.2
[12/17 11:06:31][INFO] logging.py:   99: json_stats: {"cur_iter": "83", "eta": "0:14:14", "split": "test_iter", "time_diff": 1.69630481}
exponential temporal pooling in test
alpha:0.2
[12/17 11:06:32][INFO] logging.py:   99: json_stats: {"cur_iter": "84", "eta": "0:14:14", "split": "test_iter", "time_diff": 1.69791170}
exponential temporal pooling in test
alpha:0.2
[12/17 11:06:42][INFO] logging.py:   99: json_stats: {"cur_iter": "85", "eta": "1:21:57", "split": "test_iter", "time_diff": 9.79517189}
exponential temporal pooling in test
alpha:0.2
[12/17 11:06:44][INFO] logging.py:   99: json_stats: {"cur_iter": "86", "eta": "0:14:11", "split": "test_iter", "time_diff": 1.69963886}
exponential temporal pooling in test
alpha:0.2
[12/17 11:06:46][INFO] logging.py:   99: json_stats: {"cur_iter": "87", "eta": "0:14:09", "split": "test_iter", "time_diff": 1.69883299}
exponential temporal pooling in test
alpha:0.2
[12/17 11:06:47][INFO] logging.py:   99: json_stats: {"cur_iter": "88", "eta": "0:14:06", "split": "test_iter", "time_diff": 1.69582500}
exponential temporal pooling in test
alpha:0.2
[12/17 11:06:57][INFO] logging.py:   99: json_stats: {"cur_iter": "89", "eta": "1:18:54", "split": "test_iter", "time_diff": 9.50623908}
exponential temporal pooling in test
alpha:0.2
[12/17 11:06:59][INFO] logging.py:   99: json_stats: {"cur_iter": "90", "eta": "0:14:03", "split": "test_iter", "time_diff": 1.69774187}
exponential temporal pooling in test
alpha:0.2
[12/17 11:07:00][INFO] logging.py:   99: json_stats: {"cur_iter": "91", "eta": "0:14:06", "split": "test_iter", "time_diff": 1.70737323}
exponential temporal pooling in test
alpha:0.2
[12/17 11:07:02][INFO] logging.py:   99: json_stats: {"cur_iter": "92", "eta": "0:13:56", "split": "test_iter", "time_diff": 1.68928291}
exponential temporal pooling in test
alpha:0.2
[12/17 11:07:12][INFO] logging.py:   99: json_stats: {"cur_iter": "93", "eta": "1:24:19", "split": "test_iter", "time_diff": 10.24105412}
exponential temporal pooling in test
alpha:0.2
[12/17 11:07:14][INFO] logging.py:   99: json_stats: {"cur_iter": "94", "eta": "0:13:58", "split": "test_iter", "time_diff": 1.70126509}
exponential temporal pooling in test
alpha:0.2
[12/17 11:07:16][INFO] logging.py:   99: json_stats: {"cur_iter": "95", "eta": "0:13:57", "split": "test_iter", "time_diff": 1.70139073}
exponential temporal pooling in test
alpha:0.2
[12/17 11:07:17][INFO] logging.py:   99: json_stats: {"cur_iter": "96", "eta": "0:13:53", "split": "test_iter", "time_diff": 1.69669467}
exponential temporal pooling in test
alpha:0.2
[12/17 11:07:27][INFO] logging.py:   99: json_stats: {"cur_iter": "97", "eta": "1:19:32", "split": "test_iter", "time_diff": 9.74008661}
exponential temporal pooling in test
alpha:0.2
[12/17 11:07:29][INFO] logging.py:   99: json_stats: {"cur_iter": "98", "eta": "0:13:45", "split": "test_iter", "time_diff": 1.68745108}
exponential temporal pooling in test
alpha:0.2
[12/17 11:07:30][INFO] logging.py:   99: json_stats: {"cur_iter": "99", "eta": "0:13:51", "split": "test_iter", "time_diff": 1.70491507}
exponential temporal pooling in test
alpha:0.2
[12/17 11:07:32][INFO] logging.py:   99: json_stats: {"cur_iter": "100", "eta": "0:13:45", "split": "test_iter", "time_diff": 1.69542300}
exponential temporal pooling in test
alpha:0.2
[12/17 11:07:42][INFO] logging.py:   99: json_stats: {"cur_iter": "101", "eta": "1:18:04", "split": "test_iter", "time_diff": 9.63943580}
exponential temporal pooling in test
alpha:0.2
[12/17 11:07:44][INFO] logging.py:   99: json_stats: {"cur_iter": "102", "eta": "0:18:53", "split": "test_iter", "time_diff": 2.33711124}
exponential temporal pooling in test
alpha:0.2
[12/17 11:07:46][INFO] logging.py:   99: json_stats: {"cur_iter": "103", "eta": "0:13:43", "split": "test_iter", "time_diff": 1.70067189}
exponential temporal pooling in test
alpha:0.2
[12/17 11:07:48][INFO] logging.py:   99: json_stats: {"cur_iter": "104", "eta": "0:13:37", "split": "test_iter", "time_diff": 1.69345851}
exponential temporal pooling in test
alpha:0.2
[12/17 11:07:58][INFO] logging.py:   99: json_stats: {"cur_iter": "105", "eta": "1:22:32", "split": "test_iter", "time_diff": 10.27406983}
exponential temporal pooling in test
alpha:0.2
[12/17 11:08:00][INFO] logging.py:   99: json_stats: {"cur_iter": "106", "eta": "0:13:36", "split": "test_iter", "time_diff": 1.69712164}
exponential temporal pooling in test
alpha:0.2
[12/17 11:08:01][INFO] logging.py:   99: json_stats: {"cur_iter": "107", "eta": "0:13:39", "split": "test_iter", "time_diff": 1.70720891}
exponential temporal pooling in test
alpha:0.2
[12/17 11:08:03][INFO] logging.py:   99: json_stats: {"cur_iter": "108", "eta": "0:13:30", "split": "test_iter", "time_diff": 1.69253452}
exponential temporal pooling in test
alpha:0.2
[12/17 11:08:13][INFO] logging.py:   99: json_stats: {"cur_iter": "109", "eta": "1:20:27", "split": "test_iter", "time_diff": 10.09962090}
exponential temporal pooling in test
alpha:0.2
[12/17 11:08:15][INFO] logging.py:   99: json_stats: {"cur_iter": "110", "eta": "0:13:33", "split": "test_iter", "time_diff": 1.70612859}
exponential temporal pooling in test
alpha:0.2
[12/17 11:08:16][INFO] logging.py:   99: json_stats: {"cur_iter": "111", "eta": "0:13:32", "split": "test_iter", "time_diff": 1.70784302}
exponential temporal pooling in test
alpha:0.2
[12/17 11:08:18][INFO] logging.py:   99: json_stats: {"cur_iter": "112", "eta": "0:13:21", "split": "test_iter", "time_diff": 1.68711667}
exponential temporal pooling in test
alpha:0.2
[12/17 11:08:27][INFO] logging.py:   99: json_stats: {"cur_iter": "113", "eta": "1:12:34", "split": "test_iter", "time_diff": 9.18667388}
exponential temporal pooling in test
alpha:0.2
[12/17 11:08:29][INFO] logging.py:   99: json_stats: {"cur_iter": "114", "eta": "0:13:19", "split": "test_iter", "time_diff": 1.69105768}
exponential temporal pooling in test
alpha:0.2
[12/17 11:08:31][INFO] logging.py:   99: json_stats: {"cur_iter": "115", "eta": "0:13:23", "split": "test_iter", "time_diff": 1.70238491}
exponential temporal pooling in test
alpha:0.2
[12/17 11:08:32][INFO] logging.py:   99: json_stats: {"cur_iter": "116", "eta": "0:13:22", "split": "test_iter", "time_diff": 1.70286526}
exponential temporal pooling in test
alpha:0.2
[12/17 11:08:42][INFO] logging.py:   99: json_stats: {"cur_iter": "117", "eta": "1:11:52", "split": "test_iter", "time_diff": 9.17614350}
exponential temporal pooling in test
alpha:0.2
[12/17 11:08:45][INFO] logging.py:   99: json_stats: {"cur_iter": "118", "eta": "0:23:57", "split": "test_iter", "time_diff": 3.06477546}
exponential temporal pooling in test
alpha:0.2
[12/17 11:08:46][INFO] logging.py:   99: json_stats: {"cur_iter": "119", "eta": "0:13:11", "split": "test_iter", "time_diff": 1.69147416}
exponential temporal pooling in test
alpha:0.2
[12/17 11:08:48][INFO] logging.py:   99: json_stats: {"cur_iter": "120", "eta": "0:13:17", "split": "test_iter", "time_diff": 1.70829557}
exponential temporal pooling in test
alpha:0.2
[12/17 11:08:56][INFO] logging.py:   99: json_stats: {"cur_iter": "121", "eta": "1:03:38", "split": "test_iter", "time_diff": 8.19407946}
exponential temporal pooling in test
alpha:0.2
[12/17 11:09:00][INFO] logging.py:   99: json_stats: {"cur_iter": "122", "eta": "0:31:28", "split": "test_iter", "time_diff": 4.06146068}
exponential temporal pooling in test
alpha:0.2
[12/17 11:09:02][INFO] logging.py:   99: json_stats: {"cur_iter": "123", "eta": "0:13:04", "split": "test_iter", "time_diff": 1.69061509}
exponential temporal pooling in test
alpha:0.2
[12/17 11:09:04][INFO] logging.py:   99: json_stats: {"cur_iter": "124", "eta": "0:13:04", "split": "test_iter", "time_diff": 1.69433056}
exponential temporal pooling in test
alpha:0.2
[12/17 11:09:11][INFO] logging.py:   99: json_stats: {"cur_iter": "125", "eta": "0:57:31", "split": "test_iter", "time_diff": 7.47179545}
exponential temporal pooling in test
alpha:0.2
[12/17 11:09:16][INFO] logging.py:   99: json_stats: {"cur_iter": "126", "eta": "0:36:07", "split": "test_iter", "time_diff": 4.70082221}
exponential temporal pooling in test
alpha:0.2
[12/17 11:09:18][INFO] logging.py:   99: json_stats: {"cur_iter": "127", "eta": "0:13:00", "split": "test_iter", "time_diff": 1.69599635}
exponential temporal pooling in test
alpha:0.2
[12/17 11:09:19][INFO] logging.py:   99: json_stats: {"cur_iter": "128", "eta": "0:13:03", "split": "test_iter", "time_diff": 1.70730483}
exponential temporal pooling in test
alpha:0.2
[12/17 11:09:27][INFO] logging.py:   99: json_stats: {"cur_iter": "129", "eta": "0:55:24", "split": "test_iter", "time_diff": 7.25881959}
exponential temporal pooling in test
alpha:0.2
[12/17 11:09:32][INFO] logging.py:   99: json_stats: {"cur_iter": "130", "eta": "0:43:09", "split": "test_iter", "time_diff": 5.66687466}
exponential temporal pooling in test
alpha:0.2
[12/17 11:09:34][INFO] logging.py:   99: json_stats: {"cur_iter": "131", "eta": "0:12:49", "split": "test_iter", "time_diff": 1.68647195}
exponential temporal pooling in test
alpha:0.2
[12/17 11:09:36][INFO] logging.py:   99: json_stats: {"cur_iter": "132", "eta": "0:12:52", "split": "test_iter", "time_diff": 1.69705400}
exponential temporal pooling in test
alpha:0.2
[12/17 11:09:42][INFO] logging.py:   99: json_stats: {"cur_iter": "133", "eta": "0:50:53", "split": "test_iter", "time_diff": 6.72588534}
exponential temporal pooling in test
alpha:0.2
[12/17 11:09:48][INFO] logging.py:   99: json_stats: {"cur_iter": "134", "eta": "0:41:39", "split": "test_iter", "time_diff": 5.51828276}
exponential temporal pooling in test
alpha:0.2
[12/17 11:09:50][INFO] logging.py:   99: json_stats: {"cur_iter": "135", "eta": "0:12:42", "split": "test_iter", "time_diff": 1.68663060}
exponential temporal pooling in test
alpha:0.2
[12/17 11:09:51][INFO] logging.py:   99: json_stats: {"cur_iter": "136", "eta": "0:12:44", "split": "test_iter", "time_diff": 1.69588205}
exponential temporal pooling in test
alpha:0.2
[12/17 11:09:58][INFO] logging.py:   99: json_stats: {"cur_iter": "137", "eta": "0:53:07", "split": "test_iter", "time_diff": 7.08404550}
exponential temporal pooling in test
alpha:0.2
[12/17 11:10:06][INFO] logging.py:   99: json_stats: {"cur_iter": "138", "eta": "0:58:53", "split": "test_iter", "time_diff": 7.86873528}
exponential temporal pooling in test
alpha:0.2
[12/17 11:10:08][INFO] logging.py:   99: json_stats: {"cur_iter": "139", "eta": "0:12:38", "split": "test_iter", "time_diff": 1.69241819}
exponential temporal pooling in test
alpha:0.2
[12/17 11:10:10][INFO] logging.py:   99: json_stats: {"cur_iter": "140", "eta": "0:12:39", "split": "test_iter", "time_diff": 1.69840261}
exponential temporal pooling in test
alpha:0.2
[12/17 11:10:27][INFO] logging.py:   99: json_stats: {"cur_iter": "141", "eta": "2:12:08", "split": "test_iter", "time_diff": 17.77773323}
exponential temporal pooling in test
alpha:0.2
[12/17 11:10:38][INFO] logging.py:   99: json_stats: {"cur_iter": "142", "eta": "1:18:52", "split": "test_iter", "time_diff": 10.63509676}
exponential temporal pooling in test
alpha:0.2
[12/17 11:10:40][INFO] logging.py:   99: json_stats: {"cur_iter": "143", "eta": "0:12:27", "split": "test_iter", "time_diff": 1.68400892}
exponential temporal pooling in test
alpha:0.2
[12/17 11:10:41][INFO] logging.py:   99: json_stats: {"cur_iter": "144", "eta": "0:12:36", "split": "test_iter", "time_diff": 1.70831092}
exponential temporal pooling in test
alpha:0.2
[12/17 11:10:58][INFO] logging.py:   99: json_stats: {"cur_iter": "145", "eta": "2:05:21", "split": "test_iter", "time_diff": 17.01735642}
exponential temporal pooling in test
alpha:0.2
[12/17 11:11:10][INFO] logging.py:   99: json_stats: {"cur_iter": "146", "eta": "1:22:29", "split": "test_iter", "time_diff": 11.22423215}
exponential temporal pooling in test
alpha:0.2
[12/17 11:11:11][INFO] logging.py:   99: json_stats: {"cur_iter": "147", "eta": "0:12:21", "split": "test_iter", "time_diff": 1.68415682}
exponential temporal pooling in test
alpha:0.2
[12/17 11:11:13][INFO] logging.py:   99: json_stats: {"cur_iter": "148", "eta": "0:12:28", "split": "test_iter", "time_diff": 1.70399704}
exponential temporal pooling in test
alpha:0.2
[12/17 11:11:28][INFO] logging.py:   99: json_stats: {"cur_iter": "149", "eta": "1:49:06", "split": "test_iter", "time_diff": 14.94592260}
exponential temporal pooling in test
alpha:0.2
[12/17 11:11:43][INFO] logging.py:   99: json_stats: {"cur_iter": "150", "eta": "1:48:47", "split": "test_iter", "time_diff": 14.93726818}
exponential temporal pooling in test
alpha:0.2
[12/17 11:11:45][INFO] logging.py:   99: json_stats: {"cur_iter": "151", "eta": "0:12:16", "split": "test_iter", "time_diff": 1.69019860}
exponential temporal pooling in test
alpha:0.2
[12/17 11:11:46][INFO] logging.py:   99: json_stats: {"cur_iter": "152", "eta": "0:12:20", "split": "test_iter", "time_diff": 1.70316908}
exponential temporal pooling in test
alpha:0.2
[12/17 11:11:58][INFO] logging.py:   99: json_stats: {"cur_iter": "153", "eta": "1:22:08", "split": "test_iter", "time_diff": 11.35699239}
exponential temporal pooling in test
alpha:0.2
[12/17 11:12:14][INFO] logging.py:   99: json_stats: {"cur_iter": "154", "eta": "1:55:10", "split": "test_iter", "time_diff": 15.96020833}
exponential temporal pooling in test
alpha:0.2
[12/17 11:12:15][INFO] logging.py:   99: json_stats: {"cur_iter": "155", "eta": "0:12:09", "split": "test_iter", "time_diff": 1.68908576}
exponential temporal pooling in test
alpha:0.2
[12/17 11:12:17][INFO] logging.py:   99: json_stats: {"cur_iter": "156", "eta": "0:12:15", "split": "test_iter", "time_diff": 1.70695186}
exponential temporal pooling in test
alpha:0.2
[12/17 11:12:30][INFO] logging.py:   99: json_stats: {"cur_iter": "157", "eta": "1:29:17", "split": "test_iter", "time_diff": 12.45943785}
exponential temporal pooling in test
alpha:0.2
[12/17 11:12:44][INFO] logging.py:   99: json_stats: {"cur_iter": "158", "eta": "1:43:07", "split": "test_iter", "time_diff": 14.42373308}
exponential temporal pooling in test
alpha:0.2
[12/17 11:12:46][INFO] logging.py:   99: json_stats: {"cur_iter": "159", "eta": "0:12:01", "split": "test_iter", "time_diff": 1.68466726}
exponential temporal pooling in test
alpha:0.2
[12/17 11:12:47][INFO] logging.py:   99: json_stats: {"cur_iter": "160", "eta": "0:12:04", "split": "test_iter", "time_diff": 1.69629417}
exponential temporal pooling in test
alpha:0.2
[12/17 11:12:59][INFO] logging.py:   99: json_stats: {"cur_iter": "161", "eta": "1:23:28", "split": "test_iter", "time_diff": 11.75638647}
exponential temporal pooling in test
alpha:0.2
[12/17 11:13:14][INFO] logging.py:   99: json_stats: {"cur_iter": "162", "eta": "1:47:57", "split": "test_iter", "time_diff": 15.24099534}
exponential temporal pooling in test
alpha:0.2
[12/17 11:13:16][INFO] logging.py:   99: json_stats: {"cur_iter": "163", "eta": "0:11:56", "split": "test_iter", "time_diff": 1.68922539}
exponential temporal pooling in test
alpha:0.2
[12/17 11:13:18][INFO] logging.py:   99: json_stats: {"cur_iter": "164", "eta": "0:11:59", "split": "test_iter", "time_diff": 1.70110441}
exponential temporal pooling in test
alpha:0.2
[12/17 11:13:30][INFO] logging.py:   99: json_stats: {"cur_iter": "165", "eta": "1:25:58", "split": "test_iter", "time_diff": 12.22347459}
exponential temporal pooling in test
alpha:0.2
[12/17 11:13:44][INFO] logging.py:   99: json_stats: {"cur_iter": "166", "eta": "1:39:52", "split": "test_iter", "time_diff": 14.23308489}
exponential temporal pooling in test
alpha:0.2
[12/17 11:13:46][INFO] logging.py:   99: json_stats: {"cur_iter": "167", "eta": "0:11:54", "split": "test_iter", "time_diff": 1.70043489}
exponential temporal pooling in test
alpha:0.2
[12/17 11:13:48][INFO] logging.py:   99: json_stats: {"cur_iter": "168", "eta": "0:11:49", "split": "test_iter", "time_diff": 1.69381593}
exponential temporal pooling in test
alpha:0.2
[12/17 11:14:02][INFO] logging.py:   99: json_stats: {"cur_iter": "169", "eta": "1:39:28", "split": "test_iter", "time_diff": 14.27937308}
exponential temporal pooling in test
alpha:0.2
[12/17 11:14:15][INFO] logging.py:   99: json_stats: {"cur_iter": "170", "eta": "1:32:34", "split": "test_iter", "time_diff": 13.32133372}
exponential temporal pooling in test
alpha:0.2
[12/17 11:14:17][INFO] logging.py:   99: json_stats: {"cur_iter": "171", "eta": "0:11:40", "split": "test_iter", "time_diff": 1.68464251}
exponential temporal pooling in test
alpha:0.2
[12/17 11:14:19][INFO] logging.py:   99: json_stats: {"cur_iter": "172", "eta": "0:11:42", "split": "test_iter", "time_diff": 1.69315886}
exponential temporal pooling in test
alpha:0.2
[12/17 11:14:34][INFO] logging.py:   99: json_stats: {"cur_iter": "173", "eta": "1:42:28", "split": "test_iter", "time_diff": 14.85233486}
exponential temporal pooling in test
alpha:0.2
[12/17 11:14:46][INFO] logging.py:   99: json_stats: {"cur_iter": "174", "eta": "1:27:46", "split": "test_iter", "time_diff": 12.75293546}
exponential temporal pooling in test
alpha:0.2
[12/17 11:14:48][INFO] logging.py:   99: json_stats: {"cur_iter": "175", "eta": "0:11:34", "split": "test_iter", "time_diff": 1.68513763}
exponential temporal pooling in test
alpha:0.2
[12/17 11:14:50][INFO] logging.py:   99: json_stats: {"cur_iter": "176", "eta": "0:11:38", "split": "test_iter", "time_diff": 1.70052048}
exponential temporal pooling in test
alpha:0.2
[12/17 11:15:05][INFO] logging.py:   99: json_stats: {"cur_iter": "177", "eta": "1:43:48", "split": "test_iter", "time_diff": 15.19144931}
exponential temporal pooling in test
alpha:0.2
[12/17 11:15:15][INFO] logging.py:   99: json_stats: {"cur_iter": "178", "eta": "1:07:51", "split": "test_iter", "time_diff": 9.95498343}
exponential temporal pooling in test
alpha:0.2
[12/17 11:15:17][INFO] logging.py:   99: json_stats: {"cur_iter": "179", "eta": "0:11:28", "split": "test_iter", "time_diff": 1.68837893}
exponential temporal pooling in test
alpha:0.2
[12/17 11:15:18][INFO] logging.py:   99: json_stats: {"cur_iter": "180", "eta": "0:11:31", "split": "test_iter", "time_diff": 1.69802449}
exponential temporal pooling in test
alpha:0.2
[12/17 11:15:36][INFO] logging.py:   99: json_stats: {"cur_iter": "181", "eta": "2:00:43", "split": "test_iter", "time_diff": 17.84224377}
exponential temporal pooling in test
alpha:0.2
[12/17 11:15:46][INFO] logging.py:   99: json_stats: {"cur_iter": "182", "eta": "1:05:44", "split": "test_iter", "time_diff": 9.74009254}
exponential temporal pooling in test
alpha:0.2
[12/17 11:15:47][INFO] logging.py:   99: json_stats: {"cur_iter": "183", "eta": "0:11:22", "split": "test_iter", "time_diff": 1.68841985}
exponential temporal pooling in test
alpha:0.2
[12/17 11:15:49][INFO] logging.py:   99: json_stats: {"cur_iter": "184", "eta": "0:11:26", "split": "test_iter", "time_diff": 1.70423184}
exponential temporal pooling in test
alpha:0.2
[12/17 11:16:04][INFO] logging.py:   99: json_stats: {"cur_iter": "185", "eta": "1:41:28", "split": "test_iter", "time_diff": 15.14604704}
exponential temporal pooling in test
alpha:0.2
[12/17 11:16:16][INFO] logging.py:   99: json_stats: {"cur_iter": "186", "eta": "1:18:13", "split": "test_iter", "time_diff": 11.70392705}
exponential temporal pooling in test
alpha:0.2
[12/17 11:16:18][INFO] logging.py:   99: json_stats: {"cur_iter": "187", "eta": "0:11:19", "split": "test_iter", "time_diff": 1.69750016}
exponential temporal pooling in test
alpha:0.2
[12/17 11:16:19][INFO] logging.py:   99: json_stats: {"cur_iter": "188", "eta": "0:11:17", "split": "test_iter", "time_diff": 1.69736249}
exponential temporal pooling in test
alpha:0.2
[12/17 11:16:36][INFO] logging.py:   99: json_stats: {"cur_iter": "189", "eta": "1:46:27", "split": "test_iter", "time_diff": 16.04789671}
exponential temporal pooling in test
alpha:0.2
[12/17 11:16:48][INFO] logging.py:   99: json_stats: {"cur_iter": "190", "eta": "1:19:26", "split": "test_iter", "time_diff": 12.00630477}
exponential temporal pooling in test
alpha:0.2
[12/17 11:16:49][INFO] logging.py:   99: json_stats: {"cur_iter": "191", "eta": "0:11:12", "split": "test_iter", "time_diff": 1.69767100}
exponential temporal pooling in test
alpha:0.2
[12/17 11:16:51][INFO] logging.py:   99: json_stats: {"cur_iter": "192", "eta": "0:11:12", "split": "test_iter", "time_diff": 1.70188261}
exponential temporal pooling in test
alpha:0.2
[12/17 11:17:07][INFO] logging.py:   99: json_stats: {"cur_iter": "193", "eta": "1:44:37", "split": "test_iter", "time_diff": 15.93243013}
exponential temporal pooling in test
alpha:0.2
[12/17 11:17:18][INFO] logging.py:   99: json_stats: {"cur_iter": "194", "eta": "1:12:13", "split": "test_iter", "time_diff": 11.02763364}
exponential temporal pooling in test
alpha:0.2
[12/17 11:17:20][INFO] logging.py:   99: json_stats: {"cur_iter": "195", "eta": "0:11:04", "split": "test_iter", "time_diff": 1.69519403}
exponential temporal pooling in test
alpha:0.2
[12/17 11:17:21][INFO] logging.py:   99: json_stats: {"cur_iter": "196", "eta": "0:11:06", "split": "test_iter", "time_diff": 1.70346924}
exponential temporal pooling in test
alpha:0.2
[12/17 11:17:37][INFO] logging.py:   99: json_stats: {"cur_iter": "197", "eta": "1:45:08", "split": "test_iter", "time_diff": 16.17583392}
exponential temporal pooling in test
alpha:0.2
[12/17 11:17:50][INFO] logging.py:   99: json_stats: {"cur_iter": "198", "eta": "1:21:51", "split": "test_iter", "time_diff": 12.62688321}
exponential temporal pooling in test
alpha:0.2
[12/17 11:17:52][INFO] logging.py:   99: json_stats: {"cur_iter": "199", "eta": "0:10:59", "split": "test_iter", "time_diff": 1.70030389}
exponential temporal pooling in test
alpha:0.2
[12/17 11:17:54][INFO] logging.py:   99: json_stats: {"cur_iter": "200", "eta": "0:10:57", "split": "test_iter", "time_diff": 1.69941522}
exponential temporal pooling in test
alpha:0.2
[12/17 11:18:08][INFO] logging.py:   99: json_stats: {"cur_iter": "201", "eta": "1:35:39", "split": "test_iter", "time_diff": 14.86966876}
exponential temporal pooling in test
alpha:0.2
[12/17 11:18:22][INFO] logging.py:   99: json_stats: {"cur_iter": "202", "eta": "1:25:07", "split": "test_iter", "time_diff": 13.26572770}
exponential temporal pooling in test
alpha:0.2
[12/17 11:18:23][INFO] logging.py:   99: json_stats: {"cur_iter": "203", "eta": "0:10:48", "split": "test_iter", "time_diff": 1.68824730}
exponential temporal pooling in test
alpha:0.2
[12/17 11:18:25][INFO] logging.py:   99: json_stats: {"cur_iter": "204", "eta": "0:10:50", "split": "test_iter", "time_diff": 1.69772352}
exponential temporal pooling in test
alpha:0.2
[12/17 11:18:38][INFO] logging.py:   99: json_stats: {"cur_iter": "205", "eta": "1:22:08", "split": "test_iter", "time_diff": 12.90091150}
exponential temporal pooling in test
alpha:0.2
[12/17 11:18:54][INFO] logging.py:   99: json_stats: {"cur_iter": "206", "eta": "1:44:00", "split": "test_iter", "time_diff": 16.37828080}
exponential temporal pooling in test
alpha:0.2
[12/17 11:18:56][INFO] logging.py:   99: json_stats: {"cur_iter": "207", "eta": "0:10:41", "split": "test_iter", "time_diff": 1.68804938}
exponential temporal pooling in test
alpha:0.2
[12/17 11:18:58][INFO] logging.py:   99: json_stats: {"cur_iter": "208", "eta": "0:10:41", "split": "test_iter", "time_diff": 1.69278678}
exponential temporal pooling in test
alpha:0.2
[12/17 11:19:14][INFO] logging.py:   99: json_stats: {"cur_iter": "209", "eta": "1:40:22", "split": "test_iter", "time_diff": 15.93158957}
exponential temporal pooling in test
alpha:0.2
[12/17 11:19:26][INFO] logging.py:   99: json_stats: {"cur_iter": "210", "eta": "1:19:48", "split": "test_iter", "time_diff": 12.70031860}
exponential temporal pooling in test
alpha:0.2
[12/17 11:19:28][INFO] logging.py:   99: json_stats: {"cur_iter": "211", "eta": "0:10:35", "split": "test_iter", "time_diff": 1.69107912}
exponential temporal pooling in test
alpha:0.2
[12/17 11:19:30][INFO] logging.py:   99: json_stats: {"cur_iter": "212", "eta": "0:10:35", "split": "test_iter", "time_diff": 1.69400488}
exponential temporal pooling in test
alpha:0.2
[12/17 11:19:46][INFO] logging.py:   99: json_stats: {"cur_iter": "213", "eta": "1:44:18", "split": "test_iter", "time_diff": 16.73293274}
exponential temporal pooling in test
alpha:0.2
[12/17 11:19:57][INFO] logging.py:   99: json_stats: {"cur_iter": "214", "eta": "1:06:05", "split": "test_iter", "time_diff": 10.63023587}
exponential temporal pooling in test
alpha:0.2
[12/17 11:19:59][INFO] logging.py:   99: json_stats: {"cur_iter": "215", "eta": "0:10:30", "split": "test_iter", "time_diff": 1.69623608}
exponential temporal pooling in test
alpha:0.2
[12/17 11:20:01][INFO] logging.py:   99: json_stats: {"cur_iter": "216", "eta": "0:10:29", "split": "test_iter", "time_diff": 1.69735992}
exponential temporal pooling in test
alpha:0.2
[12/17 11:20:17][INFO] logging.py:   99: json_stats: {"cur_iter": "217", "eta": "1:41:03", "split": "test_iter", "time_diff": 16.38683159}
exponential temporal pooling in test
alpha:0.2
[12/17 11:20:26][INFO] logging.py:   99: json_stats: {"cur_iter": "218", "eta": "0:55:01", "split": "test_iter", "time_diff": 8.94826915}
exponential temporal pooling in test
alpha:0.2
[12/17 11:20:28][INFO] logging.py:   99: json_stats: {"cur_iter": "219", "eta": "0:10:20", "split": "test_iter", "time_diff": 1.68586242}
exponential temporal pooling in test
alpha:0.2
[12/17 11:20:29][INFO] logging.py:   99: json_stats: {"cur_iter": "220", "eta": "0:10:22", "split": "test_iter", "time_diff": 1.69535189}
exponential temporal pooling in test
alpha:0.2
[12/17 11:20:48][INFO] logging.py:   99: json_stats: {"cur_iter": "221", "eta": "1:53:13", "split": "test_iter", "time_diff": 18.56268824}
exponential temporal pooling in test
alpha:0.2
[12/17 11:20:56][INFO] logging.py:   99: json_stats: {"cur_iter": "222", "eta": "0:52:16", "split": "test_iter", "time_diff": 8.59319695}
exponential temporal pooling in test
alpha:0.2
[12/17 11:20:58][INFO] logging.py:   99: json_stats: {"cur_iter": "223", "eta": "0:10:13", "split": "test_iter", "time_diff": 1.68568291}
exponential temporal pooling in test
alpha:0.2
[12/17 11:21:00][INFO] logging.py:   99: json_stats: {"cur_iter": "224", "eta": "0:10:17", "split": "test_iter", "time_diff": 1.70120199}
exponential temporal pooling in test
alpha:0.2
[12/17 11:21:16][INFO] logging.py:   99: json_stats: {"cur_iter": "225", "eta": "1:40:05", "split": "test_iter", "time_diff": 16.59078271}
exponential temporal pooling in test
alpha:0.2
[12/17 11:21:26][INFO] logging.py:   99: json_stats: {"cur_iter": "226", "eta": "0:55:56", "split": "test_iter", "time_diff": 9.29888010}
exponential temporal pooling in test
alpha:0.2
[12/17 11:21:27][INFO] logging.py:   99: json_stats: {"cur_iter": "227", "eta": "0:10:09", "split": "test_iter", "time_diff": 1.69408119}
exponential temporal pooling in test
alpha:0.2
[12/17 11:21:29][INFO] logging.py:   99: json_stats: {"cur_iter": "228", "eta": "0:10:10", "split": "test_iter", "time_diff": 1.70095755}
exponential temporal pooling in test
alpha:0.2
[12/17 11:21:48][INFO] logging.py:   99: json_stats: {"cur_iter": "229", "eta": "1:54:27", "split": "test_iter", "time_diff": 19.18303352}
exponential temporal pooling in test
alpha:0.2
[12/17 11:21:57][INFO] logging.py:   99: json_stats: {"cur_iter": "230", "eta": "0:53:14", "split": "test_iter", "time_diff": 8.94834485}
exponential temporal pooling in test
alpha:0.2
[12/17 11:21:59][INFO] logging.py:   99: json_stats: {"cur_iter": "231", "eta": "0:10:00", "split": "test_iter", "time_diff": 1.68782119}
exponential temporal pooling in test
alpha:0.2
[12/17 11:22:01][INFO] logging.py:   99: json_stats: {"cur_iter": "232", "eta": "0:10:04", "split": "test_iter", "time_diff": 1.70399426}
exponential temporal pooling in test
alpha:0.2
[12/17 11:22:19][INFO] logging.py:   99: json_stats: {"cur_iter": "233", "eta": "1:48:26", "split": "test_iter", "time_diff": 18.38096666}
exponential temporal pooling in test
alpha:0.2
[12/17 11:22:26][INFO] logging.py:   99: json_stats: {"cur_iter": "234", "eta": "0:40:57", "split": "test_iter", "time_diff": 6.96170389}
exponential temporal pooling in test
alpha:0.2
[12/17 11:22:28][INFO] logging.py:   99: json_stats: {"cur_iter": "235", "eta": "0:09:52", "split": "test_iter", "time_diff": 1.68397129}
exponential temporal pooling in test
alpha:0.2
[12/17 11:22:29][INFO] logging.py:   99: json_stats: {"cur_iter": "236", "eta": "0:10:00", "split": "test_iter", "time_diff": 1.71033052}
exponential temporal pooling in test
alpha:0.2
[12/17 11:22:49][INFO] logging.py:   99: json_stats: {"cur_iter": "237", "eta": "1:56:38", "split": "test_iter", "time_diff": 19.99563364}
exponential temporal pooling in test
alpha:0.2
[12/17 11:22:56][INFO] logging.py:   99: json_stats: {"cur_iter": "238", "eta": "0:38:07", "split": "test_iter", "time_diff": 6.55586128}
exponential temporal pooling in test
alpha:0.2
[12/17 11:22:58][INFO] logging.py:   99: json_stats: {"cur_iter": "239", "eta": "0:09:48", "split": "test_iter", "time_diff": 1.69073052}
exponential temporal pooling in test
alpha:0.2
[12/17 11:22:59][INFO] logging.py:   99: json_stats: {"cur_iter": "240", "eta": "0:09:51", "split": "test_iter", "time_diff": 1.70366911}
exponential temporal pooling in test
alpha:0.2
[12/17 11:23:19][INFO] logging.py:   99: json_stats: {"cur_iter": "241", "eta": "1:52:25", "split": "test_iter", "time_diff": 19.49520252}
exponential temporal pooling in test
alpha:0.2
[12/17 11:23:27][INFO] logging.py:   99: json_stats: {"cur_iter": "242", "eta": "0:46:35", "split": "test_iter", "time_diff": 8.10358562}
exponential temporal pooling in test
alpha:0.2
[12/17 11:23:29][INFO] logging.py:   99: json_stats: {"cur_iter": "243", "eta": "0:09:41", "split": "test_iter", "time_diff": 1.69184638}
exponential temporal pooling in test
alpha:0.2
[12/17 11:23:30][INFO] logging.py:   99: json_stats: {"cur_iter": "244", "eta": "0:09:42", "split": "test_iter", "time_diff": 1.69917343}
exponential temporal pooling in test
alpha:0.2
[12/17 11:23:50][INFO] logging.py:   99: json_stats: {"cur_iter": "245", "eta": "1:49:30", "split": "test_iter", "time_diff": 19.21157674}
exponential temporal pooling in test
alpha:0.2
[12/17 11:23:59][INFO] logging.py:   99: json_stats: {"cur_iter": "246", "eta": "0:54:51", "split": "test_iter", "time_diff": 9.65109684}
exponential temporal pooling in test
alpha:0.2
[12/17 11:24:01][INFO] logging.py:   99: json_stats: {"cur_iter": "247", "eta": "0:09:34", "split": "test_iter", "time_diff": 1.69053489}
exponential temporal pooling in test
alpha:0.2
[12/17 11:24:03][INFO] logging.py:   99: json_stats: {"cur_iter": "248", "eta": "0:09:37", "split": "test_iter", "time_diff": 1.70357607}
exponential temporal pooling in test
alpha:0.2
[12/17 11:24:20][INFO] logging.py:   99: json_stats: {"cur_iter": "249", "eta": "1:40:24", "split": "test_iter", "time_diff": 17.82481032}
exponential temporal pooling in test
alpha:0.2
[12/17 11:24:31][INFO] logging.py:   99: json_stats: {"cur_iter": "250", "eta": "0:59:45", "split": "test_iter", "time_diff": 10.63946451}
exponential temporal pooling in test
alpha:0.2
[12/17 11:24:33][INFO] logging.py:   99: json_stats: {"cur_iter": "251", "eta": "0:09:28", "split": "test_iter", "time_diff": 1.69331756}
exponential temporal pooling in test
alpha:0.2
[12/17 11:24:34][INFO] logging.py:   99: json_stats: {"cur_iter": "252", "eta": "0:09:28", "split": "test_iter", "time_diff": 1.69843019}
exponential temporal pooling in test
alpha:0.2
[12/17 11:24:52][INFO] logging.py:   99: json_stats: {"cur_iter": "253", "eta": "1:39:37", "split": "test_iter", "time_diff": 17.89549416}
exponential temporal pooling in test
alpha:0.2
[12/17 11:25:02][INFO] logging.py:   99: json_stats: {"cur_iter": "254", "eta": "0:53:11", "split": "test_iter", "time_diff": 9.58305666}
exponential temporal pooling in test
alpha:0.2
[12/17 11:25:04][INFO] logging.py:   99: json_stats: {"cur_iter": "255", "eta": "0:09:19", "split": "test_iter", "time_diff": 1.68577000}
exponential temporal pooling in test
alpha:0.2
[12/17 11:25:05][INFO] logging.py:   99: json_stats: {"cur_iter": "256", "eta": "0:09:23", "split": "test_iter", "time_diff": 1.70383413}
exponential temporal pooling in test
alpha:0.2
[12/17 11:25:22][INFO] logging.py:   99: json_stats: {"cur_iter": "257", "eta": "1:31:47", "split": "test_iter", "time_diff": 16.68938485}
exponential temporal pooling in test
alpha:0.2
[12/17 11:25:31][INFO] logging.py:   99: json_stats: {"cur_iter": "258", "eta": "0:50:56", "split": "test_iter", "time_diff": 9.29171778}
exponential temporal pooling in test
alpha:0.2
[12/17 11:25:33][INFO] logging.py:   99: json_stats: {"cur_iter": "259", "eta": "0:09:18", "split": "test_iter", "time_diff": 1.70140932}
exponential temporal pooling in test
alpha:0.2
[12/17 11:25:35][INFO] logging.py:   99: json_stats: {"cur_iter": "260", "eta": "0:09:15", "split": "test_iter", "time_diff": 1.69749120}
exponential temporal pooling in test
alpha:0.2
[12/17 11:25:53][INFO] logging.py:   99: json_stats: {"cur_iter": "261", "eta": "1:41:13", "split": "test_iter", "time_diff": 18.63106981}
exponential temporal pooling in test
alpha:0.2
[12/17 11:26:02][INFO] logging.py:   99: json_stats: {"cur_iter": "262", "eta": "0:47:15", "split": "test_iter", "time_diff": 8.72360158}
exponential temporal pooling in test
alpha:0.2
[12/17 11:26:04][INFO] logging.py:   99: json_stats: {"cur_iter": "263", "eta": "0:09:12", "split": "test_iter", "time_diff": 1.70642271}
exponential temporal pooling in test
alpha:0.2
[12/17 11:26:06][INFO] logging.py:   99: json_stats: {"cur_iter": "264", "eta": "0:09:05", "split": "test_iter", "time_diff": 1.68848604}
exponential temporal pooling in test
alpha:0.2
[12/17 11:26:22][INFO] logging.py:   99: json_stats: {"cur_iter": "265", "eta": "1:28:23", "split": "test_iter", "time_diff": 16.46902027}
exponential temporal pooling in test
alpha:0.2
[12/17 11:26:32][INFO] logging.py:   99: json_stats: {"cur_iter": "266", "eta": "0:53:42", "split": "test_iter", "time_diff": 10.03859320}
exponential temporal pooling in test
alpha:0.2
[12/17 11:26:34][INFO] logging.py:   99: json_stats: {"cur_iter": "267", "eta": "0:09:05", "split": "test_iter", "time_diff": 1.70317222}
exponential temporal pooling in test
alpha:0.2
[12/17 11:26:35][INFO] logging.py:   99: json_stats: {"cur_iter": "268", "eta": "0:08:59", "split": "test_iter", "time_diff": 1.69054707}
exponential temporal pooling in test
alpha:0.2
[12/17 11:26:55][INFO] logging.py:   99: json_stats: {"cur_iter": "269", "eta": "1:41:37", "split": "test_iter", "time_diff": 19.17377077}
exponential temporal pooling in test
alpha:0.2
[12/17 11:27:04][INFO] logging.py:   99: json_stats: {"cur_iter": "270", "eta": "0:50:29", "split": "test_iter", "time_diff": 9.55694746}
exponential temporal pooling in test
alpha:0.2
[12/17 11:27:06][INFO] logging.py:   99: json_stats: {"cur_iter": "271", "eta": "0:08:57", "split": "test_iter", "time_diff": 1.70150855}
exponential temporal pooling in test
alpha:0.2
[12/17 11:27:08][INFO] logging.py:   99: json_stats: {"cur_iter": "272", "eta": "0:08:50", "split": "test_iter", "time_diff": 1.68544353}
exponential temporal pooling in test
alpha:0.2
[12/17 11:27:28][INFO] logging.py:   99: json_stats: {"cur_iter": "273", "eta": "1:49:15", "split": "test_iter", "time_diff": 20.87856998}
exponential temporal pooling in test
alpha:0.2
[12/17 11:27:36][INFO] logging.py:   99: json_stats: {"cur_iter": "274", "eta": "0:41:32", "split": "test_iter", "time_diff": 7.96473796}
exponential temporal pooling in test
alpha:0.2
[12/17 11:27:38][INFO] logging.py:   99: json_stats: {"cur_iter": "275", "eta": "0:08:52", "split": "test_iter", "time_diff": 1.70540748}
exponential temporal pooling in test
alpha:0.2
[12/17 11:27:40][INFO] logging.py:   99: json_stats: {"cur_iter": "276", "eta": "0:08:47", "split": "test_iter", "time_diff": 1.69608607}
exponential temporal pooling in test
alpha:0.2
[12/17 11:27:58][INFO] logging.py:   99: json_stats: {"cur_iter": "277", "eta": "1:32:55", "split": "test_iter", "time_diff": 17.98534493}
exponential temporal pooling in test
alpha:0.2
[12/17 11:28:08][INFO] logging.py:   99: json_stats: {"cur_iter": "278", "eta": "0:53:35", "split": "test_iter", "time_diff": 10.40705257}
exponential temporal pooling in test
alpha:0.2
[12/17 11:28:10][INFO] logging.py:   99: json_stats: {"cur_iter": "279", "eta": "0:08:42", "split": "test_iter", "time_diff": 1.69788486}
exponential temporal pooling in test
alpha:0.2
[12/17 11:28:12][INFO] logging.py:   99: json_stats: {"cur_iter": "280", "eta": "0:08:40", "split": "test_iter", "time_diff": 1.69527453}
exponential temporal pooling in test
alpha:0.2
[12/17 11:28:30][INFO] logging.py:   99: json_stats: {"cur_iter": "281", "eta": "1:33:14", "split": "test_iter", "time_diff": 18.28136141}
exponential temporal pooling in test
alpha:0.2
[12/17 11:28:37][INFO] logging.py:   99: json_stats: {"cur_iter": "282", "eta": "0:35:53", "split": "test_iter", "time_diff": 7.06143231}
exponential temporal pooling in test
alpha:0.2
[12/17 11:28:39][INFO] logging.py:   99: json_stats: {"cur_iter": "283", "eta": "0:08:36", "split": "test_iter", "time_diff": 1.70019440}
exponential temporal pooling in test
alpha:0.2
[12/17 11:28:40][INFO] logging.py:   99: json_stats: {"cur_iter": "284", "eta": "0:08:32", "split": "test_iter", "time_diff": 1.69097009}
exponential temporal pooling in test
alpha:0.2
[12/17 11:29:02][INFO] logging.py:   99: json_stats: {"cur_iter": "285", "eta": "1:49:18", "split": "test_iter", "time_diff": 21.71833947}
exponential temporal pooling in test
alpha:0.2
[12/17 11:29:10][INFO] logging.py:   99: json_stats: {"cur_iter": "286", "eta": "0:37:09", "split": "test_iter", "time_diff": 7.40587144}
exponential temporal pooling in test
alpha:0.2
[12/17 11:29:11][INFO] logging.py:   99: json_stats: {"cur_iter": "287", "eta": "0:08:30", "split": "test_iter", "time_diff": 1.70285781}
exponential temporal pooling in test
alpha:0.2
[12/17 11:29:13][INFO] logging.py:   99: json_stats: {"cur_iter": "288", "eta": "0:08:25", "split": "test_iter", "time_diff": 1.69087849}
exponential temporal pooling in test
alpha:0.2
[12/17 11:29:34][INFO] logging.py:   99: json_stats: {"cur_iter": "289", "eta": "1:42:29", "split": "test_iter", "time_diff": 20.63729778}
exponential temporal pooling in test
alpha:0.2
[12/17 11:29:43][INFO] logging.py:   99: json_stats: {"cur_iter": "290", "eta": "0:45:29", "split": "test_iter", "time_diff": 9.18989536}
exponential temporal pooling in test
alpha:0.2
[12/17 11:29:44][INFO] logging.py:   99: json_stats: {"cur_iter": "291", "eta": "0:08:24", "split": "test_iter", "time_diff": 1.70459206}
exponential temporal pooling in test
alpha:0.2
[12/17 11:29:46][INFO] logging.py:   99: json_stats: {"cur_iter": "292", "eta": "0:08:19", "split": "test_iter", "time_diff": 1.69452233}
exponential temporal pooling in test
alpha:0.2
[12/17 11:30:06][INFO] logging.py:   99: json_stats: {"cur_iter": "293", "eta": "1:37:06", "split": "test_iter", "time_diff": 19.81861807}
exponential temporal pooling in test
alpha:0.2
[12/17 11:30:12][INFO] logging.py:   99: json_stats: {"cur_iter": "294", "eta": "0:27:48", "split": "test_iter", "time_diff": 5.69558441}
exponential temporal pooling in test
alpha:0.2
[12/17 11:30:13][INFO] logging.py:   99: json_stats: {"cur_iter": "295", "eta": "0:08:15", "split": "test_iter", "time_diff": 1.69771528}
exponential temporal pooling in test
alpha:0.2
[12/17 11:30:15][INFO] logging.py:   99: json_stats: {"cur_iter": "296", "eta": "0:08:11", "split": "test_iter", "time_diff": 1.68985123}
exponential temporal pooling in test
alpha:0.2
[12/17 11:30:35][INFO] logging.py:   99: json_stats: {"cur_iter": "297", "eta": "1:36:08", "split": "test_iter", "time_diff": 19.89265267}
exponential temporal pooling in test
alpha:0.2
[12/17 11:30:44][INFO] logging.py:   99: json_stats: {"cur_iter": "298", "eta": "0:42:59", "split": "test_iter", "time_diff": 8.92422520}
exponential temporal pooling in test
alpha:0.2
[12/17 11:30:46][INFO] logging.py:   99: json_stats: {"cur_iter": "299", "eta": "0:08:10", "split": "test_iter", "time_diff": 1.70291497}
exponential temporal pooling in test
alpha:0.2
[12/17 11:30:47][INFO] logging.py:   99: json_stats: {"cur_iter": "300", "eta": "0:08:04", "split": "test_iter", "time_diff": 1.68770749}
exponential temporal pooling in test
alpha:0.2
[12/17 11:31:09][INFO] logging.py:   99: json_stats: {"cur_iter": "301", "eta": "1:41:58", "split": "test_iter", "time_diff": 21.39427717}
exponential temporal pooling in test
alpha:0.2
[12/17 11:31:14][INFO] logging.py:   99: json_stats: {"cur_iter": "302", "eta": "0:25:20", "split": "test_iter", "time_diff": 5.33407086}
exponential temporal pooling in test
alpha:0.2
[12/17 11:31:16][INFO] logging.py:   99: json_stats: {"cur_iter": "303", "eta": "0:08:03", "split": "test_iter", "time_diff": 1.70366640}
exponential temporal pooling in test
alpha:0.2
[12/17 11:31:17][INFO] logging.py:   99: json_stats: {"cur_iter": "304", "eta": "0:07:57", "split": "test_iter", "time_diff": 1.68847736}
exponential temporal pooling in test
alpha:0.2
[12/17 11:31:39][INFO] logging.py:   99: json_stats: {"cur_iter": "305", "eta": "1:42:33", "split": "test_iter", "time_diff": 21.81971275}
exponential temporal pooling in test
alpha:0.2
[12/17 11:31:45][INFO] logging.py:   99: json_stats: {"cur_iter": "306", "eta": "0:28:12", "split": "test_iter", "time_diff": 6.02325004}
exponential temporal pooling in test
alpha:0.2
[12/17 11:31:47][INFO] logging.py:   99: json_stats: {"cur_iter": "307", "eta": "0:07:55", "split": "test_iter", "time_diff": 1.69785114}
exponential temporal pooling in test
alpha:0.2
[12/17 11:31:49][INFO] logging.py:   99: json_stats: {"cur_iter": "308", "eta": "0:07:51", "split": "test_iter", "time_diff": 1.69036676}
exponential temporal pooling in test
alpha:0.2
[12/17 11:32:09][INFO] logging.py:   99: json_stats: {"cur_iter": "309", "eta": "1:32:31", "split": "test_iter", "time_diff": 19.96998169}
exponential temporal pooling in test
alpha:0.2
[12/17 11:32:16][INFO] logging.py:   99: json_stats: {"cur_iter": "310", "eta": "0:35:12", "split": "test_iter", "time_diff": 7.62703221}
exponential temporal pooling in test
alpha:0.2
[12/17 11:32:18][INFO] logging.py:   99: json_stats: {"cur_iter": "311", "eta": "0:07:50", "split": "test_iter", "time_diff": 1.70618542}
exponential temporal pooling in test
alpha:0.2
[12/17 11:32:20][INFO] logging.py:   99: json_stats: {"cur_iter": "312", "eta": "0:07:43", "split": "test_iter", "time_diff": 1.68551497}
exponential temporal pooling in test
alpha:0.2
[12/17 11:32:40][INFO] logging.py:   99: json_stats: {"cur_iter": "313", "eta": "1:34:05", "split": "test_iter", "time_diff": 20.60435212}
exponential temporal pooling in test
alpha:0.2
[12/17 11:32:46][INFO] logging.py:   99: json_stats: {"cur_iter": "314", "eta": "0:26:34", "split": "test_iter", "time_diff": 5.84124547}
exponential temporal pooling in test
alpha:0.2
[12/17 11:32:48][INFO] logging.py:   99: json_stats: {"cur_iter": "315", "eta": "0:07:42", "split": "test_iter", "time_diff": 1.69863716}
exponential temporal pooling in test
alpha:0.2
[12/17 11:32:50][INFO] logging.py:   99: json_stats: {"cur_iter": "316", "eta": "0:07:37", "split": "test_iter", "time_diff": 1.69001743}
exponential temporal pooling in test
alpha:0.2
[12/17 11:33:11][INFO] logging.py:   99: json_stats: {"cur_iter": "317", "eta": "1:35:05", "split": "test_iter", "time_diff": 21.13251819}
exponential temporal pooling in test
alpha:0.2
[12/17 11:33:16][INFO] logging.py:   99: json_stats: {"cur_iter": "318", "eta": "0:24:12", "split": "test_iter", "time_diff": 5.39915775}
exponential temporal pooling in test
alpha:0.2
[12/17 11:33:18][INFO] logging.py:   99: json_stats: {"cur_iter": "319", "eta": "0:07:36", "split": "test_iter", "time_diff": 1.70285561}
exponential temporal pooling in test
alpha:0.2
[12/17 11:33:19][INFO] logging.py:   99: json_stats: {"cur_iter": "320", "eta": "0:07:29", "split": "test_iter", "time_diff": 1.68388550}
exponential temporal pooling in test
alpha:0.2
[12/17 11:33:45][INFO] logging.py:   99: json_stats: {"cur_iter": "321", "eta": "1:52:05", "split": "test_iter", "time_diff": 25.28498082}
exponential temporal pooling in test
alpha:0.2
[12/17 11:33:46][INFO] logging.py:   99: json_stats: {"cur_iter": "322", "eta": "0:07:32", "split": "test_iter", "time_diff": 1.70782736}
exponential temporal pooling in test
alpha:0.2
[12/17 11:33:48][INFO] logging.py:   99: json_stats: {"cur_iter": "323", "eta": "0:07:26", "split": "test_iter", "time_diff": 1.68986224}
exponential temporal pooling in test
alpha:0.2
[12/17 11:33:50][INFO] logging.py:   99: json_stats: {"cur_iter": "324", "eta": "0:07:25", "split": "test_iter", "time_diff": 1.69325643}
exponential temporal pooling in test
alpha:0.2
[12/17 11:34:14][INFO] logging.py:   99: json_stats: {"cur_iter": "325", "eta": "1:43:55", "split": "test_iter", "time_diff": 23.80054705}
exponential temporal pooling in test
alpha:0.2
[12/17 11:34:16][INFO] logging.py:   99: json_stats: {"cur_iter": "326", "eta": "0:10:35", "split": "test_iter", "time_diff": 2.43550033}
exponential temporal pooling in test
alpha:0.2
[12/17 11:34:18][INFO] logging.py:   99: json_stats: {"cur_iter": "327", "eta": "0:07:17", "split": "test_iter", "time_diff": 1.68396028}
exponential temporal pooling in test
alpha:0.2
[12/17 11:34:19][INFO] logging.py:   99: json_stats: {"cur_iter": "328", "eta": "0:07:19", "split": "test_iter", "time_diff": 1.69732890}
exponential temporal pooling in test
alpha:0.2
[12/17 11:34:46][INFO] logging.py:   99: json_stats: {"cur_iter": "329", "eta": "1:55:43", "split": "test_iter", "time_diff": 26.91131415}
exponential temporal pooling in test
alpha:0.2
[12/17 11:34:48][INFO] logging.py:   99: json_stats: {"cur_iter": "330", "eta": "0:07:16", "split": "test_iter", "time_diff": 1.69980699}
exponential temporal pooling in test
alpha:0.2
[12/17 11:34:50][INFO] logging.py:   99: json_stats: {"cur_iter": "331", "eta": "0:07:13", "split": "test_iter", "time_diff": 1.69488163}
exponential temporal pooling in test
alpha:0.2
[12/17 11:34:51][INFO] logging.py:   99: json_stats: {"cur_iter": "332", "eta": "0:07:13", "split": "test_iter", "time_diff": 1.69932209}
exponential temporal pooling in test
alpha:0.2
[12/17 11:35:17][INFO] logging.py:   99: json_stats: {"cur_iter": "333", "eta": "1:49:36", "split": "test_iter", "time_diff": 25.89324864}
exponential temporal pooling in test
alpha:0.2
[12/17 11:35:21][INFO] logging.py:   99: json_stats: {"cur_iter": "334", "eta": "0:16:34", "split": "test_iter", "time_diff": 3.93166829}
exponential temporal pooling in test
alpha:0.2
[12/17 11:35:23][INFO] logging.py:   99: json_stats: {"cur_iter": "335", "eta": "0:07:05", "split": "test_iter", "time_diff": 1.68735406}
exponential temporal pooling in test
alpha:0.2
[12/17 11:35:25][INFO] logging.py:   99: json_stats: {"cur_iter": "336", "eta": "0:07:05", "split": "test_iter", "time_diff": 1.69337594}
exponential temporal pooling in test
alpha:0.2
[12/17 11:35:48][INFO] logging.py:   99: json_stats: {"cur_iter": "337", "eta": "1:38:30", "split": "test_iter", "time_diff": 23.64330007}
exponential temporal pooling in test
alpha:0.2
[12/17 11:35:55][INFO] logging.py:   99: json_stats: {"cur_iter": "338", "eta": "0:26:45", "split": "test_iter", "time_diff": 6.44824082}
exponential temporal pooling in test
alpha:0.2
[12/17 11:35:56][INFO] logging.py:   99: json_stats: {"cur_iter": "339", "eta": "0:06:59", "split": "test_iter", "time_diff": 1.68990958}
exponential temporal pooling in test
alpha:0.2
[12/17 11:35:58][INFO] logging.py:   99: json_stats: {"cur_iter": "340", "eta": "0:06:59", "split": "test_iter", "time_diff": 1.69821203}
exponential temporal pooling in test
alpha:0.2
[12/17 11:36:19][INFO] logging.py:   99: json_stats: {"cur_iter": "341", "eta": "1:24:19", "split": "test_iter", "time_diff": 20.56705442}
exponential temporal pooling in test
alpha:0.2
[12/17 11:36:27][INFO] logging.py:   99: json_stats: {"cur_iter": "342", "eta": "0:31:47", "split": "test_iter", "time_diff": 7.78390906}
exponential temporal pooling in test
alpha:0.2
[12/17 11:36:28][INFO] logging.py:   99: json_stats: {"cur_iter": "343", "eta": "0:06:54", "split": "test_iter", "time_diff": 1.69730143}
exponential temporal pooling in test
alpha:0.2
[12/17 11:36:30][INFO] logging.py:   99: json_stats: {"cur_iter": "344", "eta": "0:06:54", "split": "test_iter", "time_diff": 1.70537034}
exponential temporal pooling in test
alpha:0.2
[12/17 11:36:50][INFO] logging.py:   99: json_stats: {"cur_iter": "345", "eta": "1:20:06", "split": "test_iter", "time_diff": 19.86221956}
exponential temporal pooling in test
alpha:0.2
[12/17 11:36:58][INFO] logging.py:   99: json_stats: {"cur_iter": "346", "eta": "0:33:01", "split": "test_iter", "time_diff": 8.22050121}
exponential temporal pooling in test
alpha:0.2
[12/17 11:37:00][INFO] logging.py:   99: json_stats: {"cur_iter": "347", "eta": "0:07:05", "split": "test_iter", "time_diff": 1.77116386}
exponential temporal pooling in test
alpha:0.2
[12/17 11:37:02][INFO] logging.py:   99: json_stats: {"cur_iter": "348", "eta": "0:06:42", "split": "test_iter", "time_diff": 1.68408759}
exponential temporal pooling in test
alpha:0.2
[12/17 11:37:19][INFO] logging.py:   99: json_stats: {"cur_iter": "349", "eta": "1:09:59", "split": "test_iter", "time_diff": 17.64311825}
exponential temporal pooling in test
alpha:0.2
[12/17 11:37:27][INFO] logging.py:   99: json_stats: {"cur_iter": "350", "eta": "0:30:45", "split": "test_iter", "time_diff": 7.78554297}
exponential temporal pooling in test
alpha:0.2
[12/17 11:37:29][INFO] logging.py:   99: json_stats: {"cur_iter": "351", "eta": "0:06:40", "split": "test_iter", "time_diff": 1.69631855}
exponential temporal pooling in test
alpha:0.2
[12/17 11:37:30][INFO] logging.py:   99: json_stats: {"cur_iter": "352", "eta": "0:06:39", "split": "test_iter", "time_diff": 1.70203418}
exponential temporal pooling in test
alpha:0.2
[12/17 11:37:51][INFO] logging.py:   99: json_stats: {"cur_iter": "353", "eta": "1:19:44", "split": "test_iter", "time_diff": 20.44702496}
exponential temporal pooling in test
alpha:0.2
[12/17 11:37:57][INFO] logging.py:   99: json_stats: {"cur_iter": "354", "eta": "0:23:29", "split": "test_iter", "time_diff": 6.04925464}
exponential temporal pooling in test
alpha:0.2
[12/17 11:37:59][INFO] logging.py:   99: json_stats: {"cur_iter": "355", "eta": "0:06:32", "split": "test_iter", "time_diff": 1.69218141}
exponential temporal pooling in test
alpha:0.2
[12/17 11:38:00][INFO] logging.py:   99: json_stats: {"cur_iter": "356", "eta": "0:06:33", "split": "test_iter", "time_diff": 1.70509254}
exponential temporal pooling in test
alpha:0.2
[12/17 11:38:22][INFO] logging.py:   99: json_stats: {"cur_iter": "357", "eta": "1:21:50", "split": "test_iter", "time_diff": 21.35086031}
exponential temporal pooling in test
alpha:0.2
[12/17 11:38:25][INFO] logging.py:   99: json_stats: {"cur_iter": "358", "eta": "0:13:26", "split": "test_iter", "time_diff": 3.52057682}
exponential temporal pooling in test
alpha:0.2
[12/17 11:38:27][INFO] logging.py:   99: json_stats: {"cur_iter": "359", "eta": "0:06:27", "split": "test_iter", "time_diff": 1.70170698}
exponential temporal pooling in test
alpha:0.2
[12/17 11:38:29][INFO] logging.py:   99: json_stats: {"cur_iter": "360", "eta": "0:06:22", "split": "test_iter", "time_diff": 1.68512495}
exponential temporal pooling in test
alpha:0.2
[12/17 11:38:53][INFO] logging.py:   99: json_stats: {"cur_iter": "361", "eta": "1:33:15", "split": "test_iter", "time_diff": 24.75977097}
exponential temporal pooling in test
alpha:0.2
[12/17 11:38:55][INFO] logging.py:   99: json_stats: {"cur_iter": "362", "eta": "0:06:57", "split": "test_iter", "time_diff": 1.85527649}
exponential temporal pooling in test
alpha:0.2
[12/17 11:38:57][INFO] logging.py:   99: json_stats: {"cur_iter": "363", "eta": "0:06:18", "split": "test_iter", "time_diff": 1.68911625}
exponential temporal pooling in test
alpha:0.2
[12/17 11:38:59][INFO] logging.py:   99: json_stats: {"cur_iter": "364", "eta": "0:06:20", "split": "test_iter", "time_diff": 1.70606843}
exponential temporal pooling in test
alpha:0.2
[12/17 11:39:24][INFO] logging.py:   99: json_stats: {"cur_iter": "365", "eta": "1:35:38", "split": "test_iter", "time_diff": 25.85028062}
exponential temporal pooling in test
alpha:0.2
[12/17 11:39:28][INFO] logging.py:   99: json_stats: {"cur_iter": "366", "eta": "0:15:06", "split": "test_iter", "time_diff": 4.10095697}
exponential temporal pooling in test
alpha:0.2
[12/17 11:39:30][INFO] logging.py:   99: json_stats: {"cur_iter": "367", "eta": "0:06:12", "split": "test_iter", "time_diff": 1.69290949}
exponential temporal pooling in test
alpha:0.2
[12/17 11:39:32][INFO] logging.py:   99: json_stats: {"cur_iter": "368", "eta": "0:06:11", "split": "test_iter", "time_diff": 1.69737082}
exponential temporal pooling in test
alpha:0.2
[12/17 11:39:56][INFO] logging.py:   99: json_stats: {"cur_iter": "369", "eta": "1:27:55", "split": "test_iter", "time_diff": 24.19831029}
exponential temporal pooling in test
alpha:0.2
[12/17 11:39:59][INFO] logging.py:   99: json_stats: {"cur_iter": "370", "eta": "0:08:57", "split": "test_iter", "time_diff": 2.47536021}
exponential temporal pooling in test
alpha:0.2
[12/17 11:40:00][INFO] logging.py:   99: json_stats: {"cur_iter": "371", "eta": "0:06:05", "split": "test_iter", "time_diff": 1.68997958}
exponential temporal pooling in test
alpha:0.2
[12/17 11:40:02][INFO] logging.py:   99: json_stats: {"cur_iter": "372", "eta": "0:06:03", "split": "test_iter", "time_diff": 1.69293846}
exponential temporal pooling in test
alpha:0.2
[12/17 11:40:26][INFO] logging.py:   99: json_stats: {"cur_iter": "373", "eta": "1:24:37", "split": "test_iter", "time_diff": 23.72665337}
exponential temporal pooling in test
alpha:0.2
[12/17 11:40:30][INFO] logging.py:   99: json_stats: {"cur_iter": "374", "eta": "0:15:46", "split": "test_iter", "time_diff": 4.44377685}
exponential temporal pooling in test
alpha:0.2
[12/17 11:40:32][INFO] logging.py:   99: json_stats: {"cur_iter": "375", "eta": "0:05:57", "split": "test_iter", "time_diff": 1.68534318}
exponential temporal pooling in test
alpha:0.2
[12/17 11:40:34][INFO] logging.py:   99: json_stats: {"cur_iter": "376", "eta": "0:06:00", "split": "test_iter", "time_diff": 1.70848453}
exponential temporal pooling in test
alpha:0.2
[12/17 11:40:56][INFO] logging.py:   99: json_stats: {"cur_iter": "377", "eta": "1:19:11", "split": "test_iter", "time_diff": 22.62642952}
exponential temporal pooling in test
alpha:0.2
[12/17 11:41:03][INFO] logging.py:   99: json_stats: {"cur_iter": "378", "eta": "0:23:08", "split": "test_iter", "time_diff": 6.64248477}
exponential temporal pooling in test
alpha:0.2
[12/17 11:41:05][INFO] logging.py:   99: json_stats: {"cur_iter": "379", "eta": "0:05:51", "split": "test_iter", "time_diff": 1.68955046}
exponential temporal pooling in test
alpha:0.2
[12/17 11:41:06][INFO] logging.py:   99: json_stats: {"cur_iter": "380", "eta": "0:05:52", "split": "test_iter", "time_diff": 1.70446346}
exponential temporal pooling in test
alpha:0.2
[12/17 11:41:29][INFO] logging.py:   99: json_stats: {"cur_iter": "381", "eta": "1:17:15", "split": "test_iter", "time_diff": 22.50013977}
exponential temporal pooling in test
alpha:0.2
[12/17 11:41:33][INFO] logging.py:   99: json_stats: {"cur_iter": "382", "eta": "0:15:00", "split": "test_iter", "time_diff": 4.39505626}
exponential temporal pooling in test
alpha:0.2
[12/17 11:41:35][INFO] logging.py:   99: json_stats: {"cur_iter": "383", "eta": "0:05:43", "split": "test_iter", "time_diff": 1.68561036}
exponential temporal pooling in test
alpha:0.2
[12/17 11:41:37][INFO] logging.py:   99: json_stats: {"cur_iter": "384", "eta": "0:05:43", "split": "test_iter", "time_diff": 1.69447037}
exponential temporal pooling in test
alpha:0.2
[12/17 11:41:59][INFO] logging.py:   99: json_stats: {"cur_iter": "385", "eta": "1:17:13", "split": "test_iter", "time_diff": 22.93876110}
exponential temporal pooling in test
alpha:0.2
[12/17 11:42:04][INFO] logging.py:   99: json_stats: {"cur_iter": "386", "eta": "0:15:53", "split": "test_iter", "time_diff": 4.74557905}
exponential temporal pooling in test
alpha:0.2
[12/17 11:42:06][INFO] logging.py:   99: json_stats: {"cur_iter": "387", "eta": "0:05:38", "split": "test_iter", "time_diff": 1.69249494}
exponential temporal pooling in test
alpha:0.2
[12/17 11:42:08][INFO] logging.py:   99: json_stats: {"cur_iter": "388", "eta": "0:05:39", "split": "test_iter", "time_diff": 1.70382608}
exponential temporal pooling in test
alpha:0.2
[12/17 11:42:28][INFO] logging.py:   99: json_stats: {"cur_iter": "389", "eta": "1:07:32", "split": "test_iter", "time_diff": 20.46785984}
exponential temporal pooling in test
alpha:0.2
[12/17 11:42:35][INFO] logging.py:   99: json_stats: {"cur_iter": "390", "eta": "0:23:40", "split": "test_iter", "time_diff": 7.21024936}
exponential temporal pooling in test
alpha:0.2
[12/17 11:42:37][INFO] logging.py:   99: json_stats: {"cur_iter": "391", "eta": "0:05:30", "split": "test_iter", "time_diff": 1.68800859}
exponential temporal pooling in test
alpha:0.2
[12/17 11:42:39][INFO] logging.py:   99: json_stats: {"cur_iter": "392", "eta": "0:05:30", "split": "test_iter", "time_diff": 1.69394925}
exponential temporal pooling in test
alpha:0.2
[12/17 11:42:58][INFO] logging.py:   99: json_stats: {"cur_iter": "393", "eta": "1:02:53", "split": "test_iter", "time_diff": 19.45025518}
exponential temporal pooling in test
alpha:0.2
[12/17 11:43:07][INFO] logging.py:   99: json_stats: {"cur_iter": "394", "eta": "0:29:33", "split": "test_iter", "time_diff": 9.18670927}
exponential temporal pooling in test
alpha:0.2
[12/17 11:43:09][INFO] logging.py:   99: json_stats: {"cur_iter": "395", "eta": "0:05:24", "split": "test_iter", "time_diff": 1.68766690}
exponential temporal pooling in test
alpha:0.2
[12/17 11:43:11][INFO] logging.py:   99: json_stats: {"cur_iter": "396", "eta": "0:05:23", "split": "test_iter", "time_diff": 1.69335539}
exponential temporal pooling in test
alpha:0.2
[12/17 11:43:27][INFO] logging.py:   99: json_stats: {"cur_iter": "397", "eta": "0:50:18", "split": "test_iter", "time_diff": 15.88744010}
exponential temporal pooling in test
alpha:0.2
[12/17 11:43:40][INFO] logging.py:   99: json_stats: {"cur_iter": "398", "eta": "0:41:06", "split": "test_iter", "time_diff": 13.04890178}
exponential temporal pooling in test
alpha:0.2
[12/17 11:43:41][INFO] logging.py:   99: json_stats: {"cur_iter": "399", "eta": "0:05:18", "split": "test_iter", "time_diff": 1.69233528}
exponential temporal pooling in test
alpha:0.2
[12/17 11:43:43][INFO] logging.py:   99: json_stats: {"cur_iter": "400", "eta": "0:05:18", "split": "test_iter", "time_diff": 1.70473246}
exponential temporal pooling in test
alpha:0.2
[12/17 11:43:57][INFO] logging.py:   99: json_stats: {"cur_iter": "401", "eta": "0:44:18", "split": "test_iter", "time_diff": 14.29365519}
exponential temporal pooling in test
alpha:0.2
[12/17 11:44:11][INFO] logging.py:   99: json_stats: {"cur_iter": "402", "eta": "0:43:04", "split": "test_iter", "time_diff": 13.97147897}
exponential temporal pooling in test
alpha:0.2
[12/17 11:44:13][INFO] logging.py:   99: json_stats: {"cur_iter": "403", "eta": "0:05:10", "split": "test_iter", "time_diff": 1.68844433}
exponential temporal pooling in test
alpha:0.2
[12/17 11:44:15][INFO] logging.py:   99: json_stats: {"cur_iter": "404", "eta": "0:05:11", "split": "test_iter", "time_diff": 1.70319959}
exponential temporal pooling in test
alpha:0.2
[12/17 11:44:27][INFO] logging.py:   99: json_stats: {"cur_iter": "405", "eta": "0:38:32", "split": "test_iter", "time_diff": 12.70537470}
exponential temporal pooling in test
alpha:0.2
[12/17 11:44:45][INFO] logging.py:   99: json_stats: {"cur_iter": "406", "eta": "0:52:46", "split": "test_iter", "time_diff": 17.49604860}
exponential temporal pooling in test
alpha:0.2
[12/17 11:44:47][INFO] logging.py:   99: json_stats: {"cur_iter": "407", "eta": "0:05:03", "split": "test_iter", "time_diff": 1.68629472}
exponential temporal pooling in test
alpha:0.2
[12/17 11:44:48][INFO] logging.py:   99: json_stats: {"cur_iter": "408", "eta": "0:05:03", "split": "test_iter", "time_diff": 1.69377384}
exponential temporal pooling in test
alpha:0.2
[12/17 11:44:59][INFO] logging.py:   99: json_stats: {"cur_iter": "409", "eta": "0:31:33", "split": "test_iter", "time_diff": 10.63684024}
exponential temporal pooling in test
alpha:0.2
[12/17 11:45:17][INFO] logging.py:   99: json_stats: {"cur_iter": "410", "eta": "0:52:04", "split": "test_iter", "time_diff": 17.65315377}
exponential temporal pooling in test
alpha:0.2
[12/17 11:45:18][INFO] logging.py:   99: json_stats: {"cur_iter": "411", "eta": "0:04:57", "split": "test_iter", "time_diff": 1.69266246}
exponential temporal pooling in test
alpha:0.2
[12/17 11:45:20][INFO] logging.py:   99: json_stats: {"cur_iter": "412", "eta": "0:04:57", "split": "test_iter", "time_diff": 1.69837807}
exponential temporal pooling in test
alpha:0.2
[12/17 11:45:31][INFO] logging.py:   99: json_stats: {"cur_iter": "413", "eta": "0:32:20", "split": "test_iter", "time_diff": 11.15465266}
exponential temporal pooling in test
alpha:0.2
[12/17 11:45:49][INFO] logging.py:   99: json_stats: {"cur_iter": "414", "eta": "0:50:35", "split": "test_iter", "time_diff": 17.54495750}
exponential temporal pooling in test
alpha:0.2
[12/17 11:45:50][INFO] logging.py:   99: json_stats: {"cur_iter": "415", "eta": "0:04:51", "split": "test_iter", "time_diff": 1.69238814}
exponential temporal pooling in test
alpha:0.2
[12/17 11:45:52][INFO] logging.py:   99: json_stats: {"cur_iter": "416", "eta": "0:04:50", "split": "test_iter", "time_diff": 1.70009701}
exponential temporal pooling in test
alpha:0.2
[12/17 11:46:04][INFO] logging.py:   99: json_stats: {"cur_iter": "417", "eta": "0:33:24", "split": "test_iter", "time_diff": 11.78902324}
exponential temporal pooling in test
alpha:0.2
[12/17 11:46:20][INFO] logging.py:   99: json_stats: {"cur_iter": "418", "eta": "0:46:30", "split": "test_iter", "time_diff": 16.51441922}
exponential temporal pooling in test
alpha:0.2
[12/17 11:46:22][INFO] logging.py:   99: json_stats: {"cur_iter": "419", "eta": "0:04:42", "split": "test_iter", "time_diff": 1.68345936}
exponential temporal pooling in test
alpha:0.2
[12/17 11:46:24][INFO] logging.py:   99: json_stats: {"cur_iter": "420", "eta": "0:04:42", "split": "test_iter", "time_diff": 1.69141785}
exponential temporal pooling in test
alpha:0.2
[12/17 11:46:35][INFO] logging.py:   99: json_stats: {"cur_iter": "421", "eta": "0:31:18", "split": "test_iter", "time_diff": 11.31632681}
exponential temporal pooling in test
alpha:0.2
[12/17 11:46:53][INFO] logging.py:   99: json_stats: {"cur_iter": "422", "eta": "0:48:37", "split": "test_iter", "time_diff": 17.68392941}
exponential temporal pooling in test
alpha:0.2
[12/17 11:46:55][INFO] logging.py:   99: json_stats: {"cur_iter": "423", "eta": "0:04:37", "split": "test_iter", "time_diff": 1.69266854}
exponential temporal pooling in test
alpha:0.2
[12/17 11:46:56][INFO] logging.py:   99: json_stats: {"cur_iter": "424", "eta": "0:04:37", "split": "test_iter", "time_diff": 1.70085889}
exponential temporal pooling in test
alpha:0.2
[12/17 11:47:07][INFO] logging.py:   99: json_stats: {"cur_iter": "425", "eta": "0:29:03", "split": "test_iter", "time_diff": 10.76386490}
exponential temporal pooling in test
alpha:0.2
[12/17 11:47:24][INFO] logging.py:   99: json_stats: {"cur_iter": "426", "eta": "0:45:16", "split": "test_iter", "time_diff": 16.87256007}
exponential temporal pooling in test
alpha:0.2
[12/17 11:47:26][INFO] logging.py:   99: json_stats: {"cur_iter": "427", "eta": "0:04:31", "split": "test_iter", "time_diff": 1.69792694}
exponential temporal pooling in test
alpha:0.2
[12/17 11:47:27][INFO] logging.py:   99: json_stats: {"cur_iter": "428", "eta": "0:04:29", "split": "test_iter", "time_diff": 1.69716602}
exponential temporal pooling in test
alpha:0.2
[12/17 11:47:37][INFO] logging.py:   99: json_stats: {"cur_iter": "429", "eta": "0:26:43", "split": "test_iter", "time_diff": 10.14684465}
exponential temporal pooling in test
alpha:0.2
[12/17 11:47:54][INFO] logging.py:   99: json_stats: {"cur_iter": "430", "eta": "0:42:50", "split": "test_iter", "time_diff": 16.36943943}
exponential temporal pooling in test
alpha:0.2
[12/17 11:47:55][INFO] logging.py:   99: json_stats: {"cur_iter": "431", "eta": "0:04:22", "split": "test_iter", "time_diff": 1.68481030}
exponential temporal pooling in test
alpha:0.2
[12/17 11:47:57][INFO] logging.py:   99: json_stats: {"cur_iter": "432", "eta": "0:04:32", "split": "test_iter", "time_diff": 1.75684209}
exponential temporal pooling in test
alpha:0.2
[12/17 11:48:11][INFO] logging.py:   99: json_stats: {"cur_iter": "433", "eta": "0:34:33", "split": "test_iter", "time_diff": 13.46200902}
exponential temporal pooling in test
alpha:0.2
[12/17 11:48:23][INFO] logging.py:   99: json_stats: {"cur_iter": "434", "eta": "0:32:34", "split": "test_iter", "time_diff": 12.77544026}
exponential temporal pooling in test
alpha:0.2
[12/17 11:48:25][INFO] logging.py:   99: json_stats: {"cur_iter": "435", "eta": "0:04:16", "split": "test_iter", "time_diff": 1.68828119}
exponential temporal pooling in test
alpha:0.2
[12/17 11:48:27][INFO] logging.py:   99: json_stats: {"cur_iter": "436", "eta": "0:04:17", "split": "test_iter", "time_diff": 1.70277330}
exponential temporal pooling in test
alpha:0.2
[12/17 11:48:41][INFO] logging.py:   99: json_stats: {"cur_iter": "437", "eta": "0:36:03", "split": "test_iter", "time_diff": 14.42199559}
exponential temporal pooling in test
alpha:0.2
[12/17 11:48:53][INFO] logging.py:   99: json_stats: {"cur_iter": "438", "eta": "0:29:20", "split": "test_iter", "time_diff": 11.81493366}
exponential temporal pooling in test
alpha:0.2
[12/17 11:48:55][INFO] logging.py:   99: json_stats: {"cur_iter": "439", "eta": "0:04:09", "split": "test_iter", "time_diff": 1.68644256}
exponential temporal pooling in test
alpha:0.2
[12/17 11:48:57][INFO] logging.py:   99: json_stats: {"cur_iter": "440", "eta": "0:04:10", "split": "test_iter", "time_diff": 1.70467328}
exponential temporal pooling in test
alpha:0.2
[12/17 11:49:10][INFO] logging.py:   99: json_stats: {"cur_iter": "441", "eta": "0:33:06", "split": "test_iter", "time_diff": 13.60343963}
exponential temporal pooling in test
alpha:0.2
[12/17 11:49:23][INFO] logging.py:   99: json_stats: {"cur_iter": "442", "eta": "0:32:15", "split": "test_iter", "time_diff": 13.35061997}
exponential temporal pooling in test
alpha:0.2
[12/17 11:49:25][INFO] logging.py:   99: json_stats: {"cur_iter": "443", "eta": "0:04:02", "split": "test_iter", "time_diff": 1.68511493}
exponential temporal pooling in test
alpha:0.2
[12/17 11:49:27][INFO] logging.py:   99: json_stats: {"cur_iter": "444", "eta": "0:04:03", "split": "test_iter", "time_diff": 1.70037617}
exponential temporal pooling in test
alpha:0.2
[12/17 11:49:40][INFO] logging.py:   99: json_stats: {"cur_iter": "445", "eta": "0:30:53", "split": "test_iter", "time_diff": 13.05489931}
exponential temporal pooling in test
alpha:0.2
[12/17 11:49:55][INFO] logging.py:   99: json_stats: {"cur_iter": "446", "eta": "0:34:38", "split": "test_iter", "time_diff": 14.74257284}
exponential temporal pooling in test
alpha:0.2
[12/17 11:49:56][INFO] logging.py:   99: json_stats: {"cur_iter": "447", "eta": "0:03:56", "split": "test_iter", "time_diff": 1.69280730}
exponential temporal pooling in test
alpha:0.2
[12/17 11:49:58][INFO] logging.py:   99: json_stats: {"cur_iter": "448", "eta": "0:03:56", "split": "test_iter", "time_diff": 1.70307388}
exponential temporal pooling in test
alpha:0.2
[12/17 11:50:10][INFO] logging.py:   99: json_stats: {"cur_iter": "449", "eta": "0:27:18", "split": "test_iter", "time_diff": 11.87329420}
exponential temporal pooling in test
alpha:0.2
[12/17 11:50:25][INFO] logging.py:   99: json_stats: {"cur_iter": "450", "eta": "0:34:14", "split": "test_iter", "time_diff": 14.99293758}
exponential temporal pooling in test
alpha:0.2
[12/17 11:50:27][INFO] logging.py:   99: json_stats: {"cur_iter": "451", "eta": "0:04:01", "split": "test_iter", "time_diff": 1.77480787}
exponential temporal pooling in test
alpha:0.2
[12/17 11:50:29][INFO] logging.py:   99: json_stats: {"cur_iter": "452", "eta": "0:04:36", "split": "test_iter", "time_diff": 2.04660136}
exponential temporal pooling in test
alpha:0.2
[12/17 11:50:42][INFO] logging.py:   99: json_stats: {"cur_iter": "453", "eta": "0:30:11", "split": "test_iter", "time_diff": 13.52159218}
exponential temporal pooling in test
alpha:0.2
[12/17 11:50:52][INFO] logging.py:   99: json_stats: {"cur_iter": "454", "eta": "0:21:01", "split": "test_iter", "time_diff": 9.48347607}
exponential temporal pooling in test
alpha:0.2
[12/17 11:50:53][INFO] logging.py:   99: json_stats: {"cur_iter": "455", "eta": "0:03:43", "split": "test_iter", "time_diff": 1.68960866}
exponential temporal pooling in test
alpha:0.2
[12/17 11:50:55][INFO] logging.py:   99: json_stats: {"cur_iter": "456", "eta": "0:03:43", "split": "test_iter", "time_diff": 1.70822193}
exponential temporal pooling in test
alpha:0.2
[12/17 11:51:12][INFO] logging.py:   99: json_stats: {"cur_iter": "457", "eta": "0:36:34", "split": "test_iter", "time_diff": 16.87880344}
exponential temporal pooling in test
alpha:0.2
[12/17 11:51:24][INFO] logging.py:   99: json_stats: {"cur_iter": "458", "eta": "0:26:00", "split": "test_iter", "time_diff": 12.09792461}
exponential temporal pooling in test
alpha:0.2
[12/17 11:51:26][INFO] logging.py:   99: json_stats: {"cur_iter": "459", "eta": "0:03:36", "split": "test_iter", "time_diff": 1.69460471}
exponential temporal pooling in test
alpha:0.2
[12/17 11:51:28][INFO] logging.py:   99: json_stats: {"cur_iter": "460", "eta": "0:03:35", "split": "test_iter", "time_diff": 1.69749986}
exponential temporal pooling in test
alpha:0.2
[12/17 11:51:44][INFO] logging.py:   99: json_stats: {"cur_iter": "461", "eta": "0:34:43", "split": "test_iter", "time_diff": 16.53895563}
exponential temporal pooling in test
alpha:0.2
[12/17 11:51:56][INFO] logging.py:   99: json_stats: {"cur_iter": "462", "eta": "0:25:23", "split": "test_iter", "time_diff": 12.18818245}
exponential temporal pooling in test
alpha:0.2
[12/17 11:51:58][INFO] logging.py:   99: json_stats: {"cur_iter": "463", "eta": "0:03:29", "split": "test_iter", "time_diff": 1.68946026}
exponential temporal pooling in test
alpha:0.2
[12/17 11:52:00][INFO] logging.py:   99: json_stats: {"cur_iter": "464", "eta": "0:03:40", "split": "test_iter", "time_diff": 1.79241649}
exponential temporal pooling in test
alpha:0.2
[12/17 11:52:13][INFO] logging.py:   99: json_stats: {"cur_iter": "465", "eta": "0:27:06", "split": "test_iter", "time_diff": 13.33204940}
exponential temporal pooling in test
alpha:0.2
[12/17 11:52:28][INFO] logging.py:   99: json_stats: {"cur_iter": "466", "eta": "0:29:15", "split": "test_iter", "time_diff": 14.50848786}
exponential temporal pooling in test
alpha:0.2
[12/17 11:52:29][INFO] logging.py:   99: json_stats: {"cur_iter": "467", "eta": "0:03:22", "split": "test_iter", "time_diff": 1.68707462}
exponential temporal pooling in test
alpha:0.2
[12/17 11:52:31][INFO] logging.py:   99: json_stats: {"cur_iter": "468", "eta": "0:03:22", "split": "test_iter", "time_diff": 1.70331447}
exponential temporal pooling in test
alpha:0.2
[12/17 11:52:45][INFO] logging.py:   99: json_stats: {"cur_iter": "469", "eta": "0:27:16", "split": "test_iter", "time_diff": 13.87236218}
exponential temporal pooling in test
alpha:0.2
[12/17 11:53:00][INFO] logging.py:   99: json_stats: {"cur_iter": "470", "eta": "0:30:03", "split": "test_iter", "time_diff": 15.41807694}
exponential temporal pooling in test
alpha:0.2
[12/17 11:53:02][INFO] logging.py:   99: json_stats: {"cur_iter": "471", "eta": "0:03:15", "split": "test_iter", "time_diff": 1.68595432}
exponential temporal pooling in test
alpha:0.2
[12/17 11:53:04][INFO] logging.py:   99: json_stats: {"cur_iter": "472", "eta": "0:03:16", "split": "test_iter", "time_diff": 1.70819303}
exponential temporal pooling in test
alpha:0.2
[12/17 11:53:16][INFO] logging.py:   99: json_stats: {"cur_iter": "473", "eta": "0:23:03", "split": "test_iter", "time_diff": 12.13459099}
exponential temporal pooling in test
alpha:0.2
[12/17 11:53:32][INFO] logging.py:   99: json_stats: {"cur_iter": "474", "eta": "0:30:34", "split": "test_iter", "time_diff": 16.23746650}
exponential temporal pooling in test
alpha:0.2
[12/17 11:53:34][INFO] logging.py:   99: json_stats: {"cur_iter": "475", "eta": "0:03:10", "split": "test_iter", "time_diff": 1.69789335}
exponential temporal pooling in test
alpha:0.2
[12/17 11:53:36][INFO] logging.py:   99: json_stats: {"cur_iter": "476", "eta": "0:03:09", "split": "test_iter", "time_diff": 1.70866828}
exponential temporal pooling in test
alpha:0.2
[12/17 11:53:48][INFO] logging.py:   99: json_stats: {"cur_iter": "477", "eta": "0:22:20", "split": "test_iter", "time_diff": 12.18898739}
exponential temporal pooling in test
alpha:0.2
[12/17 11:54:00][INFO] logging.py:   99: json_stats: {"cur_iter": "478", "eta": "0:23:07", "split": "test_iter", "time_diff": 12.72652298}
exponential temporal pooling in test
alpha:0.2
[12/17 11:54:02][INFO] logging.py:   99: json_stats: {"cur_iter": "479", "eta": "0:03:02", "split": "test_iter", "time_diff": 1.69099676}
exponential temporal pooling in test
alpha:0.2
[12/17 11:54:04][INFO] logging.py:   99: json_stats: {"cur_iter": "480", "eta": "0:03:01", "split": "test_iter", "time_diff": 1.69350064}
exponential temporal pooling in test
alpha:0.2
[12/17 11:54:19][INFO] logging.py:   99: json_stats: {"cur_iter": "481", "eta": "0:27:34", "split": "test_iter", "time_diff": 15.60733989}
exponential temporal pooling in test
alpha:0.2
[12/17 11:54:31][INFO] logging.py:   99: json_stats: {"cur_iter": "482", "eta": "0:19:59", "split": "test_iter", "time_diff": 11.42480904}
exponential temporal pooling in test
alpha:0.2
[12/17 11:54:33][INFO] logging.py:   99: json_stats: {"cur_iter": "483", "eta": "0:02:55", "split": "test_iter", "time_diff": 1.69101574}
exponential temporal pooling in test
alpha:0.2
[12/17 11:54:34][INFO] logging.py:   99: json_stats: {"cur_iter": "484", "eta": "0:02:55", "split": "test_iter", "time_diff": 1.70722233}
exponential temporal pooling in test
alpha:0.2
[12/17 11:54:50][INFO] logging.py:   99: json_stats: {"cur_iter": "485", "eta": "0:27:21", "split": "test_iter", "time_diff": 16.09136218}
exponential temporal pooling in test
alpha:0.2
[12/17 11:55:02][INFO] logging.py:   99: json_stats: {"cur_iter": "486", "eta": "0:20:05", "split": "test_iter", "time_diff": 11.93805090}
exponential temporal pooling in test
alpha:0.2
[12/17 11:55:04][INFO] logging.py:   99: json_stats: {"cur_iter": "487", "eta": "0:02:49", "split": "test_iter", "time_diff": 1.69290310}
exponential temporal pooling in test
alpha:0.2
[12/17 11:55:06][INFO] logging.py:   99: json_stats: {"cur_iter": "488", "eta": "0:02:47", "split": "test_iter", "time_diff": 1.69384519}
exponential temporal pooling in test
alpha:0.2
[12/17 11:55:21][INFO] logging.py:   99: json_stats: {"cur_iter": "489", "eta": "0:24:11", "split": "test_iter", "time_diff": 14.81158162}
exponential temporal pooling in test
alpha:0.2
[12/17 11:55:34][INFO] logging.py:   99: json_stats: {"cur_iter": "490", "eta": "0:22:15", "split": "test_iter", "time_diff": 13.76833676}
exponential temporal pooling in test
alpha:0.2
[12/17 11:55:36][INFO] logging.py:   99: json_stats: {"cur_iter": "491", "eta": "0:02:43", "split": "test_iter", "time_diff": 1.70019378}
exponential temporal pooling in test
alpha:0.2
[12/17 11:55:38][INFO] logging.py:   99: json_stats: {"cur_iter": "492", "eta": "0:02:40", "split": "test_iter", "time_diff": 1.68602922}
exponential temporal pooling in test
alpha:0.2
[12/17 11:55:53][INFO] logging.py:   99: json_stats: {"cur_iter": "493", "eta": "0:23:39", "split": "test_iter", "time_diff": 15.09860881}
exponential temporal pooling in test
alpha:0.2
[12/17 11:56:07][INFO] logging.py:   99: json_stats: {"cur_iter": "494", "eta": "0:21:52", "split": "test_iter", "time_diff": 14.11569157}
exponential temporal pooling in test
alpha:0.2
[12/17 11:56:09][INFO] logging.py:   99: json_stats: {"cur_iter": "495", "eta": "0:02:36", "split": "test_iter", "time_diff": 1.70280247}
exponential temporal pooling in test
alpha:0.2
[12/17 11:56:10][INFO] logging.py:   99: json_stats: {"cur_iter": "496", "eta": "0:02:33", "split": "test_iter", "time_diff": 1.68912002}
exponential temporal pooling in test
alpha:0.2
[12/17 11:56:22][INFO] logging.py:   99: json_stats: {"cur_iter": "497", "eta": "0:18:12", "split": "test_iter", "time_diff": 12.14046657}
exponential temporal pooling in test
alpha:0.2
[12/17 11:56:38][INFO] logging.py:   99: json_stats: {"cur_iter": "498", "eta": "0:23:12", "split": "test_iter", "time_diff": 15.65057151}
exponential temporal pooling in test
alpha:0.2
[12/17 11:56:40][INFO] logging.py:   99: json_stats: {"cur_iter": "499", "eta": "0:02:28", "split": "test_iter", "time_diff": 1.69303024}
exponential temporal pooling in test
alpha:0.2
[12/17 11:56:41][INFO] logging.py:   99: json_stats: {"cur_iter": "500", "eta": "0:02:26", "split": "test_iter", "time_diff": 1.68509937}
exponential temporal pooling in test
alpha:0.2
[12/17 11:56:54][INFO] logging.py:   99: json_stats: {"cur_iter": "501", "eta": "0:17:18", "split": "test_iter", "time_diff": 12.07421144}
exponential temporal pooling in test
alpha:0.2
[12/17 11:57:08][INFO] logging.py:   99: json_stats: {"cur_iter": "502", "eta": "0:20:42", "split": "test_iter", "time_diff": 14.61718385}
exponential temporal pooling in test
alpha:0.2
[12/17 11:57:10][INFO] logging.py:   99: json_stats: {"cur_iter": "503", "eta": "0:02:22", "split": "test_iter", "time_diff": 1.70225622}
exponential temporal pooling in test
alpha:0.2
[12/17 11:57:12][INFO] logging.py:   99: json_stats: {"cur_iter": "504", "eta": "0:02:20", "split": "test_iter", "time_diff": 1.69045938}
exponential temporal pooling in test
alpha:0.2
[12/17 11:57:23][INFO] logging.py:   99: json_stats: {"cur_iter": "505", "eta": "0:15:10", "split": "test_iter", "time_diff": 11.10215987}
exponential temporal pooling in test
alpha:0.2
[12/17 11:57:38][INFO] logging.py:   99: json_stats: {"cur_iter": "506", "eta": "0:21:14", "split": "test_iter", "time_diff": 15.73280894}
exponential temporal pooling in test
alpha:0.2
[12/17 11:57:40][INFO] logging.py:   99: json_stats: {"cur_iter": "507", "eta": "0:02:15", "split": "test_iter", "time_diff": 1.69968235}
exponential temporal pooling in test
alpha:0.2
[12/17 11:57:42][INFO] logging.py:   99: json_stats: {"cur_iter": "508", "eta": "0:02:14", "split": "test_iter", "time_diff": 1.69860953}
exponential temporal pooling in test
alpha:0.2
[12/17 11:57:54][INFO] logging.py:   99: json_stats: {"cur_iter": "509", "eta": "0:15:28", "split": "test_iter", "time_diff": 11.89761067}
exponential temporal pooling in test
alpha:0.2
[12/17 11:58:09][INFO] logging.py:   99: json_stats: {"cur_iter": "510", "eta": "0:19:11", "split": "test_iter", "time_diff": 14.95577835}
exponential temporal pooling in test
alpha:0.2
[12/17 11:58:10][INFO] logging.py:   99: json_stats: {"cur_iter": "511", "eta": "0:02:09", "split": "test_iter", "time_diff": 1.70566793}
exponential temporal pooling in test
alpha:0.2
[12/17 11:58:12][INFO] logging.py:   99: json_stats: {"cur_iter": "512", "eta": "0:02:06", "split": "test_iter", "time_diff": 1.68465267}
exponential temporal pooling in test
alpha:0.2
[12/17 11:58:26][INFO] logging.py:   99: json_stats: {"cur_iter": "513", "eta": "0:17:18", "split": "test_iter", "time_diff": 14.02891063}
exponential temporal pooling in test
alpha:0.2
[12/17 11:58:41][INFO] logging.py:   99: json_stats: {"cur_iter": "514", "eta": "0:18:16", "split": "test_iter", "time_diff": 15.02276090}
exponential temporal pooling in test
alpha:0.2
[12/17 11:58:43][INFO] logging.py:   99: json_stats: {"cur_iter": "515", "eta": "0:02:02", "split": "test_iter", "time_diff": 1.70000762}
exponential temporal pooling in test
alpha:0.2
[12/17 11:58:45][INFO] logging.py:   99: json_stats: {"cur_iter": "516", "eta": "0:02:00", "split": "test_iter", "time_diff": 1.69433418}
exponential temporal pooling in test
alpha:0.2
[12/17 11:58:55][INFO] logging.py:   99: json_stats: {"cur_iter": "517", "eta": "0:12:43", "split": "test_iter", "time_diff": 10.90536183}
exponential temporal pooling in test
alpha:0.2
[12/17 11:59:12][INFO] logging.py:   99: json_stats: {"cur_iter": "518", "eta": "0:19:30", "split": "test_iter", "time_diff": 16.95845538}
exponential temporal pooling in test
alpha:0.2
[12/17 11:59:14][INFO] logging.py:   99: json_stats: {"cur_iter": "519", "eta": "0:01:55", "split": "test_iter", "time_diff": 1.70374838}
exponential temporal pooling in test
alpha:0.2
[12/17 11:59:16][INFO] logging.py:   99: json_stats: {"cur_iter": "520", "eta": "0:01:53", "split": "test_iter", "time_diff": 1.68978750}
exponential temporal pooling in test
alpha:0.2
[12/17 11:59:25][INFO] logging.py:   99: json_stats: {"cur_iter": "521", "eta": "0:10:14", "split": "test_iter", "time_diff": 9.31033194}
exponential temporal pooling in test
alpha:0.2
[12/17 11:59:46][INFO] logging.py:   99: json_stats: {"cur_iter": "522", "eta": "0:22:19", "split": "test_iter", "time_diff": 20.60364094}
exponential temporal pooling in test
alpha:0.2
[12/17 11:59:47][INFO] logging.py:   99: json_stats: {"cur_iter": "523", "eta": "0:01:48", "split": "test_iter", "time_diff": 1.69259739}
exponential temporal pooling in test
alpha:0.2
[12/17 11:59:49][INFO] logging.py:   99: json_stats: {"cur_iter": "524", "eta": "0:01:46", "split": "test_iter", "time_diff": 1.68309162}
exponential temporal pooling in test
alpha:0.2
[12/17 11:59:57][INFO] logging.py:   99: json_stats: {"cur_iter": "525", "eta": "0:08:15", "split": "test_iter", "time_diff": 7.99453454}
exponential temporal pooling in test
alpha:0.2
[12/17 12:00:16][INFO] logging.py:   99: json_stats: {"cur_iter": "526", "eta": "0:18:45", "split": "test_iter", "time_diff": 18.45620469}
exponential temporal pooling in test
alpha:0.2
[12/17 12:00:17][INFO] logging.py:   99: json_stats: {"cur_iter": "527", "eta": "0:01:42", "split": "test_iter", "time_diff": 1.70191083}
exponential temporal pooling in test
alpha:0.2
[12/17 12:00:19][INFO] logging.py:   99: json_stats: {"cur_iter": "528", "eta": "0:01:39", "split": "test_iter", "time_diff": 1.69221102}
exponential temporal pooling in test
alpha:0.2
[12/17 12:00:28][INFO] logging.py:   99: json_stats: {"cur_iter": "529", "eta": "0:09:07", "split": "test_iter", "time_diff": 9.43444265}
exponential temporal pooling in test
alpha:0.2
[12/17 12:00:45][INFO] logging.py:   99: json_stats: {"cur_iter": "530", "eta": "0:16:09", "split": "test_iter", "time_diff": 17.00527737}
exponential temporal pooling in test
alpha:0.2
[12/17 12:00:47][INFO] logging.py:   99: json_stats: {"cur_iter": "531", "eta": "0:01:34", "split": "test_iter", "time_diff": 1.69384869}
exponential temporal pooling in test
alpha:0.2
[12/17 12:00:49][INFO] logging.py:   99: json_stats: {"cur_iter": "532", "eta": "0:01:33", "split": "test_iter", "time_diff": 1.70224978}
exponential temporal pooling in test
alpha:0.2
[12/17 12:00:58][INFO] logging.py:   99: json_stats: {"cur_iter": "533", "eta": "0:08:29", "split": "test_iter", "time_diff": 9.43988834}
exponential temporal pooling in test
alpha:0.2
[12/17 12:01:18][INFO] logging.py:   99: json_stats: {"cur_iter": "534", "eta": "0:17:16", "split": "test_iter", "time_diff": 19.55606243}
exponential temporal pooling in test
alpha:0.2
[12/17 12:01:20][INFO] logging.py:   99: json_stats: {"cur_iter": "535", "eta": "0:01:28", "split": "test_iter", "time_diff": 1.70420987}
exponential temporal pooling in test
alpha:0.2
[12/17 12:01:21][INFO] logging.py:   99: json_stats: {"cur_iter": "536", "eta": "0:01:25", "split": "test_iter", "time_diff": 1.68381252}
exponential temporal pooling in test
alpha:0.2
[12/17 12:01:30][INFO] logging.py:   99: json_stats: {"cur_iter": "537", "eta": "0:06:58", "split": "test_iter", "time_diff": 8.36184874}
exponential temporal pooling in test
alpha:0.2
[12/17 12:01:49][INFO] logging.py:   99: json_stats: {"cur_iter": "538", "eta": "0:15:34", "split": "test_iter", "time_diff": 19.07632728}
exponential temporal pooling in test
alpha:0.2
[12/17 12:01:50][INFO] logging.py:   99: json_stats: {"cur_iter": "539", "eta": "0:01:21", "split": "test_iter", "time_diff": 1.69783915}
exponential temporal pooling in test
alpha:0.2
[12/17 12:01:52][INFO] logging.py:   99: json_stats: {"cur_iter": "540", "eta": "0:01:19", "split": "test_iter", "time_diff": 1.69165621}
exponential temporal pooling in test
alpha:0.2
[12/17 12:02:03][INFO] logging.py:   99: json_stats: {"cur_iter": "541", "eta": "0:08:32", "split": "test_iter", "time_diff": 11.14738175}
exponential temporal pooling in test
alpha:0.2
[12/17 12:02:18][INFO] logging.py:   99: json_stats: {"cur_iter": "542", "eta": "0:11:12", "split": "test_iter", "time_diff": 14.95547079}
exponential temporal pooling in test
alpha:0.2
[12/17 12:02:20][INFO] logging.py:   99: json_stats: {"cur_iter": "543", "eta": "0:01:14", "split": "test_iter", "time_diff": 1.69654820}
exponential temporal pooling in test
alpha:0.2
[12/17 12:02:22][INFO] logging.py:   99: json_stats: {"cur_iter": "544", "eta": "0:01:12", "split": "test_iter", "time_diff": 1.68843581}
exponential temporal pooling in test
alpha:0.2
[12/17 12:02:34][INFO] logging.py:   99: json_stats: {"cur_iter": "545", "eta": "0:08:30", "split": "test_iter", "time_diff": 12.15109007}
exponential temporal pooling in test
alpha:0.2
[12/17 12:02:48][INFO] logging.py:   99: json_stats: {"cur_iter": "546", "eta": "0:09:58", "split": "test_iter", "time_diff": 14.59919321}
exponential temporal pooling in test
alpha:0.2
[12/17 12:02:50][INFO] logging.py:   99: json_stats: {"cur_iter": "547", "eta": "0:01:07", "split": "test_iter", "time_diff": 1.69337636}
exponential temporal pooling in test
alpha:0.2
[12/17 12:02:52][INFO] logging.py:   99: json_stats: {"cur_iter": "548", "eta": "0:01:08", "split": "test_iter", "time_diff": 1.74902578}
exponential temporal pooling in test
alpha:0.2
[12/17 12:03:07][INFO] logging.py:   99: json_stats: {"cur_iter": "549", "eta": "0:09:25", "split": "test_iter", "time_diff": 14.88583855}
exponential temporal pooling in test
alpha:0.2
[12/17 12:03:18][INFO] logging.py:   99: json_stats: {"cur_iter": "550", "eta": "0:07:10", "split": "test_iter", "time_diff": 11.64812235}
exponential temporal pooling in test
alpha:0.2
[12/17 12:03:20][INFO] logging.py:   99: json_stats: {"cur_iter": "551", "eta": "0:01:01", "split": "test_iter", "time_diff": 1.70518436}
exponential temporal pooling in test
alpha:0.2
[12/17 12:03:22][INFO] logging.py:   99: json_stats: {"cur_iter": "552", "eta": "0:00:59", "split": "test_iter", "time_diff": 1.68728207}
exponential temporal pooling in test
alpha:0.2
[12/17 12:03:37][INFO] logging.py:   99: json_stats: {"cur_iter": "553", "eta": "0:08:42", "split": "test_iter", "time_diff": 15.35719932}
exponential temporal pooling in test
alpha:0.2
[12/17 12:03:48][INFO] logging.py:   99: json_stats: {"cur_iter": "554", "eta": "0:06:12", "split": "test_iter", "time_diff": 11.28927488}
exponential temporal pooling in test
alpha:0.2
[12/17 12:03:50][INFO] logging.py:   99: json_stats: {"cur_iter": "555", "eta": "0:00:54", "split": "test_iter", "time_diff": 1.69295310}
exponential temporal pooling in test
alpha:0.2
[12/17 12:03:52][INFO] logging.py:   99: json_stats: {"cur_iter": "556", "eta": "0:00:52", "split": "test_iter", "time_diff": 1.68983841}
exponential temporal pooling in test
alpha:0.2
[12/17 12:04:08][INFO] logging.py:   99: json_stats: {"cur_iter": "557", "eta": "0:07:56", "split": "test_iter", "time_diff": 15.89679580}
exponential temporal pooling in test
alpha:0.2
[12/17 12:04:17][INFO] logging.py:   99: json_stats: {"cur_iter": "558", "eta": "0:04:24", "split": "test_iter", "time_diff": 9.12924246}
exponential temporal pooling in test
alpha:0.2
[12/17 12:04:18][INFO] logging.py:   99: json_stats: {"cur_iter": "559", "eta": "0:00:47", "split": "test_iter", "time_diff": 1.69459696}
exponential temporal pooling in test
alpha:0.2
[12/17 12:04:20][INFO] logging.py:   99: json_stats: {"cur_iter": "560", "eta": "0:00:45", "split": "test_iter", "time_diff": 1.68459921}
exponential temporal pooling in test
alpha:0.2
[12/17 12:04:39][INFO] logging.py:   99: json_stats: {"cur_iter": "561", "eta": "0:08:11", "split": "test_iter", "time_diff": 18.89034985}
exponential temporal pooling in test
alpha:0.2
[12/17 12:04:48][INFO] logging.py:   99: json_stats: {"cur_iter": "562", "eta": "0:03:53", "split": "test_iter", "time_diff": 9.32868266}
exponential temporal pooling in test
alpha:0.2
[12/17 12:04:50][INFO] logging.py:   99: json_stats: {"cur_iter": "563", "eta": "0:00:40", "split": "test_iter", "time_diff": 1.70260573}
exponential temporal pooling in test
alpha:0.2
[12/17 12:04:52][INFO] logging.py:   99: json_stats: {"cur_iter": "564", "eta": "0:00:38", "split": "test_iter", "time_diff": 1.69201318}
exponential temporal pooling in test
alpha:0.2
[12/17 12:05:09][INFO] logging.py:   99: json_stats: {"cur_iter": "565", "eta": "0:06:26", "split": "test_iter", "time_diff": 17.56473567}
exponential temporal pooling in test
alpha:0.2
[12/17 12:05:22][INFO] logging.py:   99: json_stats: {"cur_iter": "566", "eta": "0:04:19", "split": "test_iter", "time_diff": 12.34615654}
exponential temporal pooling in test
alpha:0.2
[12/17 12:05:23][INFO] logging.py:   99: json_stats: {"cur_iter": "567", "eta": "0:00:33", "split": "test_iter", "time_diff": 1.69654716}
exponential temporal pooling in test
alpha:0.2
[12/17 12:05:25][INFO] logging.py:   99: json_stats: {"cur_iter": "568", "eta": "0:00:32", "split": "test_iter", "time_diff": 1.69097651}
exponential temporal pooling in test
alpha:0.2
[12/17 12:05:40][INFO] logging.py:   99: json_stats: {"cur_iter": "569", "eta": "0:04:24", "split": "test_iter", "time_diff": 14.70559679}
exponential temporal pooling in test
alpha:0.2
[12/17 12:05:51][INFO] logging.py:   99: json_stats: {"cur_iter": "570", "eta": "0:03:17", "split": "test_iter", "time_diff": 11.61788338}
exponential temporal pooling in test
alpha:0.2
[12/17 12:05:53][INFO] logging.py:   99: json_stats: {"cur_iter": "571", "eta": "0:00:27", "split": "test_iter", "time_diff": 1.69292774}
exponential temporal pooling in test
alpha:0.2
[12/17 12:05:55][INFO] logging.py:   99: json_stats: {"cur_iter": "572", "eta": "0:00:25", "split": "test_iter", "time_diff": 1.68308191}
exponential temporal pooling in test
alpha:0.2
[12/17 12:06:10][INFO] logging.py:   99: json_stats: {"cur_iter": "573", "eta": "0:03:28", "split": "test_iter", "time_diff": 14.91911398}
exponential temporal pooling in test
alpha:0.2
[12/17 12:06:22][INFO] logging.py:   99: json_stats: {"cur_iter": "574", "eta": "0:02:44", "split": "test_iter", "time_diff": 12.67405805}
exponential temporal pooling in test
alpha:0.2
[12/17 12:06:24][INFO] logging.py:   99: json_stats: {"cur_iter": "575", "eta": "0:00:20", "split": "test_iter", "time_diff": 1.69350984}
exponential temporal pooling in test
alpha:0.2
[12/17 12:06:26][INFO] logging.py:   99: json_stats: {"cur_iter": "576", "eta": "0:00:18", "split": "test_iter", "time_diff": 1.68792052}
exponential temporal pooling in test
alpha:0.2
[12/17 12:06:38][INFO] logging.py:   99: json_stats: {"cur_iter": "577", "eta": "0:02:06", "split": "test_iter", "time_diff": 12.67055842}
exponential temporal pooling in test
alpha:0.2
[12/17 12:06:54][INFO] logging.py:   99: json_stats: {"cur_iter": "578", "eta": "0:02:19", "split": "test_iter", "time_diff": 15.50904879}
exponential temporal pooling in test
alpha:0.2
[12/17 12:06:56][INFO] logging.py:   99: json_stats: {"cur_iter": "579", "eta": "0:00:13", "split": "test_iter", "time_diff": 1.69732151}
exponential temporal pooling in test
alpha:0.2
[12/17 12:06:57][INFO] logging.py:   99: json_stats: {"cur_iter": "580", "eta": "0:00:11", "split": "test_iter", "time_diff": 1.70343855}
exponential temporal pooling in test
alpha:0.2
[12/17 12:07:08][INFO] logging.py:   99: json_stats: {"cur_iter": "581", "eta": "0:01:04", "split": "test_iter", "time_diff": 10.70941145}
exponential temporal pooling in test
alpha:0.2
[12/17 12:07:21][INFO] logging.py:   99: json_stats: {"cur_iter": "582", "eta": "0:01:03", "split": "test_iter", "time_diff": 12.70587501}
exponential temporal pooling in test
alpha:0.2
[12/17 12:07:23][INFO] logging.py:   99: json_stats: {"cur_iter": "583", "eta": "0:00:06", "split": "test_iter", "time_diff": 1.68475213}
exponential temporal pooling in test
alpha:0.2
[12/17 12:07:24][INFO] logging.py:   99: json_stats: {"cur_iter": "584", "eta": "0:00:05", "split": "test_iter", "time_diff": 1.69358074}
exponential temporal pooling in test
alpha:0.2
[12/17 12:07:31][INFO] logging.py:   99: json_stats: {"cur_iter": "585", "eta": "0:00:13", "split": "test_iter", "time_diff": 6.62959626}
exponential temporal pooling in test
alpha:0.2
[12/17 12:07:32][INFO] logging.py:   99: json_stats: {"cur_iter": "586", "eta": "0:00:00", "split": "test_iter", "time_diff": 0.95937533}
[12/17 12:07:40][INFO] test_net.py:  234: Successfully saved prediction results to /mnt/SSD8T/home/huangwei/projects/FROSTER/checkpoints/basetraining/B2N_ssv2_froster/testing/temp.pyth
[12/17 12:07:40][INFO] logging.py:   99: json_stats: {"split": "test_final", "top1_acc": "18.34", "top5_acc": "44.12"}
[12/17 12:07:40][INFO] test_net.py:  474: Finalized testing with 3 temporal clips and 1 spatial crops
[12/17 12:07:40][INFO] test_net.py:  496: _p150.67_f10.00_3a18.34 Top5 Acc: 44.12 MEM: 16.99 f: 10.0000
[12/17 12:07:40][INFO] test_net.py:  497: _p150.67_f10.00_3a18.34
